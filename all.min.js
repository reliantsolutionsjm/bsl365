        let dataGrid;
        let runDatePicker = null;

        let Company_data = [];
        function fetchCompanyData() {
            $.getJSON('../database/company.json')
                .done(function(data) {
                    Company_data.push(...(Array.isArray(data.data) ? data.data : []));
                    console.log(`[✅ COMPANY FETCHED] (${Company_data.length} records)`, Company_data);
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load company.json', 'error', 3000);
                });
        }
        fetchCompanyData();

        let payRecords = [];
        function fetchPayRecords() {
            $.getJSON('../database/payslips.json?rand=' + new Date().getTime())
                .done(function(data) {
                    payRecords = data.data || data;
                    console.log(`[✅ PAY RECORDS FETCHED] (${payRecords.length} records)`, payRecords);

                    if (dataGrid) {
                        dataGrid.option("dataSource", payRecords); // assign the clean array, not the URL
                        dataGrid.refresh();
                    }
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load payslips.json', 'error', 3000);
                });
        }
        fetchPayRecords();

        let payFrequencyData = [];
        function fetchPayFrequency() {
            $.getJSON('../database/payFrequency.json')
                .done(function(data) {
                    payFrequencyData.push(...(data.data || [])); // ✅ Extracts the .data array safely
                    console.log(`[✅ PAY FREQUENCY FETCHED] (${payFrequencyData.length} records)`, payFrequencyData);
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load payFrequency.json', 'error', 3000);
                });
        }
        fetchPayFrequency();

        let payclassData = [];
        function fetchPayClass() {
            $.getJSON('../database/payClass.json')
                .done(function(data) {
                    payclassData.push(...(Array.isArray(data.data) ? data.data : []));
                    console.log(`[✅ PAYCLASS FETCHED] (${payclassData.length} records)`, payclassData);
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load payClass.json', 'error', 3000);
                });
        }
        fetchPayClass();

        let taxCategoryData = [];
        function fetchTaxCategory() {
            $.getJSON('../database/taxCategory.json')
                .done(function(data) {
                    taxCategoryData.push(...(Array.isArray(data.data) ? data.data : []));
                    console.log(`[✅ TAX CATEGORY FETCHED] (${taxCategoryData.length} records)`, taxCategoryData);
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load TaxCategory.json', 'error', 3000);
                });
        }
        fetchTaxCategory();

        let taxConfigData = [];
        function fetchTaxConfig() {
            $.getJSON('../database/taxConfig.json')
                .done(function(data) {
                    taxConfigData.push(...(Array.isArray(data.data) ? data.data : []));
                    console.log(`[✅ TAX CONFIG FETCHED] (${taxConfigData.length} records)`, taxConfigData);
                })
                .fail(function() {
                    DevExpress.ui.notify('Failed to load taxConfig.json', 'error', 3000);
                });
        }
        fetchTaxConfig();

        let employeeList = [];
        function fetchEmployees(forceReload = false) {
            return new Promise((resolve, reject) => {
                // Add cache-buster for forced reloads
                const url = forceReload ?
                    '../database/employees.json?t=' + new Date().getTime() :
                    '../database/employees.json';

                $.getJSON(url)
                    .done(function(data) {
                        employeeList = data.data || data;
                        console.log(`[✅ EMPLOYEES FETCHED] (${employeeList.length} records)`, employeeList);
                        updateInfoTiles();
                        resolve();
                    })
                    .fail(function() {
                        DevExpress.ui.notify('Failed to load employees.json', 'error', 3000);
                        reject();
                    });
            });
        }
        fetchEmployees(true); // Bypasses browser cache


        let deductionsData = [];
        function fetchDeductions() {
            $.getJSON("../database/deductions.json")
                .done(function(data) {
                    deductionsData = data.data || data;
                    console.log(`[✅ DEDUCTIONS FETCHED] (${deductionsData.length} records)`, deductionsData);

                    if (deductionsList) {
                        deductionsList.option("dataSource", deductionsData);
                        deductionsList.refresh();
                    }
                })
                .fail(function() {
                   /// DevExpress.ui.notify("Failed to load deductions.json", "error", 3000);
                });
        }
        fetchDeductions();

        /*********************************************************
         * 0) Add this function to update tiles                  *
         *********************************************************/
        function updateInfoTiles() {
            const employees = employeeList;
            // Calculate metrics
            const total = employees.length;
            const active = employees.filter(e => e.Status === 'Active').length;
            const inactive = total - active;
            const departments = [...new Set(employees.map(e => e.Department))].length;
            // Update tile values
            $('#totalEmployees .value').text(total);
            $('#activeEmployees .value').text(active);
            $('#inactiveEmployees .value').text(inactive);
            $('#totalDepartments .value').text(departments);
        }

        /*********************************************************
         * 6) PAYROLL TEMPLATES                                  *
         *********************************************************/
        const frequencyPresets = {
            Yearly: {
                // 1 pay period per year, total 2,080 hours
                hours: 2080,
                payPeriod: 1,
                periodMax: 1
            },
            'Semi-Monthly': {
                // 24 pay periods per year
                // 2,080 total hours / 24 ≈ 86.67 hours per pay period
                hours: 86.67,
                payPeriod: 1,
                periodMax: 24
            },
            Monthly: {
                // 12 pay periods per year
                // 2,080 total hours / 12 ≈ 173.33 hours per pay period
                hours: 173.33,
                payPeriod: 1,
                periodMax: 12
            },
            'Bi-Weekly': {
                // 26 pay periods per year
                // 2,080 total hours / 26 = 80 hours per pay period
                hours: 80,
                payPeriod: 1,
                periodMax: 26
            },
            Weekly: {
                // 52 pay periods per year
                // 2,080 total hours / 52 = 40 hours per pay period
                hours: 40,
                payPeriod: 1,
                periodMax: 52
            },
            Daily: {
                // 260 workdays per year (5 days/week × 52 weeks)
                // 2,080 total hours / 260 = 8 hours per pay period (day)
                hours: 8,
                payPeriod: 1,
                periodMax: 260
            }
        };
        const baseTemplate = {
            rundate: new Date(),
            ManualHours: 160,
            taxType: 1,
            TaxProfile: 1,
            DT_Rate: 2,
            OT_Rate: 1.5,
            H_Rate: 3,
            PayRateOverride: 0,
            PersonalHours: 0,
            PersonalDays: 0,
            Vac: 0,
            sickDays: 0,
            FixPayOverride: 0,
            Description: "",
            Frequency: "Monthly",
            override: "",
            Other: 0,
            Other2: 0,
            Other3: 0,
            OT_Hours: 0,
            DT_Hours: 0,
            H_Hours: 0,
            Incentive: 0,
            Travel: 0,
            Allowance: 0,
            variable_description1: "",
            variable_deduction1: 0,
            variable_description2: "",
            variable_deduction2: 0,
            variable_description3: "",
            variable_deduction3: 0,
            variable_description4: "",
            variable_deduction4: 0
        };
        let payrollTemplates = [{
            name: "Default Template",
            Frequency: "Monthly",
            ...frequencyPresets['Monthly'],
            ...baseTemplate
        }];
        // Load templates on page load
        function fetchTemplates() {
            $.getJSON('../database/template.json?rand=' + new Date().getTime())
                .done(function(data) {
                    // Merge default template with saved templates
                    payrollTemplates = [
                        ...data,
                        {
                            name: "Default Template",
                            Frequency: "Monthly",
                            ...frequencyPresets['Monthly'],
                            ...baseTemplate
                        }
                    ].filter((v, i, a) => a.findIndex(t => t.name === v.name) === i); // Remove duplicates

                    console.log(`[✅ TEMPLATES LOADED] (${payrollTemplates.length} templates)`, payrollTemplates);
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.warn('Using default templates:', textStatus, errorThrown);
                    DevExpress.ui.notify('Using default templates', 'warning', 2000);
                });
        }


        /*********************************************************
         * Getter Dynamic Logic functions                         *
         *********************************************************/
        // Helper to find employee by IDnum
        function getEmployeeByID(IDnum) {
            if (!employeeList || !Array.isArray(employeeList)) return null;
            return employeeList.find(e => e.IDnum === IDnum);
        }

        // -------------------
        // Helper Functions
        function parseDateSafe(dateString) {
            if (dateString instanceof Date) return dateString;
            const parsed = new Date(dateString);
            return isNaN(parsed.getTime()) ? new Date() : parsed;
        }

        function formatDateDisplay(date) {
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        function formatDateStorage(date) {
            return parseDateSafe(date).toISOString().split('T')[0];
        }

        function validateFrequency(freq) {
            const validFrequencies = ['Monthly', 'Weekly', 'Bi-Weekly', 'Semi-Monthly', 'Daily', 'Yearly'];
            return validFrequencies.includes(freq?.trim()) ? freq.trim() : 'Monthly';
        }

        function getPeriodMax(frequency) {
            switch (frequency) {
                case "Monthly":
                    return 12;
                case "Semi-Monthly":
                    return 24;
                case "Weekly":
                    return 52;
                case "Bi-Weekly":
                    return 26;
                case "Daily":
                    return 365;
                case "Yearly":
                    return 1;
                default:
                    return 1;
            }
        }


        //----------------------------

        // Temporary debug function
        function validateCalculations() {
            payRecords.forEach(record => {
                if (isNaN(record.payPeriod) || isNaN(record.ytdTracker)) {
                    console.error('Invalid record calculations:', {
                        ID: record.IDnum,
                        rundate: record.rundate,
                        HireDate: record.HireDate,
                        frequency: record.override || record.Frequency,
                        payPeriod: record.payPeriod,
                        ytdTracker: record.ytdTracker
                    });
                }
            });
        }

        // 1. Helper: Always returns a unique recordID
        function getNewRecordID() {
            if (payRecords.length === 0) return 1;
            return Math.max(...payRecords.map(r => r.recordID)) + 1;
        }
        // 2. Helper function for getting PayRate
        function getPayRate(rowData, payRecords, employeeList) {
            if (rowData.FixPayOverride && rowData.FixPayOverride > 0) {
                const frequency = rowData.override || rowData.Frequency;
                const hoursPerPeriod = frequencyPresets[frequency]?.hours || 0;

                if (hoursPerPeriod > 0) {
                    return rowData.FixPayOverride / hoursPerPeriod;
                } else {
                    return rowData.FixPayOverride;
                }
            }

            if (rowData.PayRateOverride && rowData.PayRateOverride > 0) {
                return rowData.PayRateOverride;
            }

            if (rowData.recordID !== undefined && rowData.recordID !== null) {
                const payRecord = payRecords.find(p => p.recordID === rowData.recordID);
                if (payRecord?.PayRate) return payRecord.PayRate;
            }

            const employee = employeeList.find(e => e.IDnum === rowData.IDnum);
            return employee?.PayRate || 0;
        }
        // 3. Helper function for calculating Sick Pay
        function getSickPay(rowData, payRecords, employeeList) {
            const payRate = getPayRate(rowData, payRecords, employeeList);
            const sickDays = rowData.sickDays || 0;
            return sickDays * payRate;
        }

        /*********************************************************
         *  CENTRAL CALCULATION FUNCTION                       *
         *********************************************************/

        function getEffectiveHours(formData) {
            const effectiveFrequency = formData.override || formData.Frequency;

            if (formData.ManualHours === 0) {
                return formData.ManualHours = 0;
            }

            if (formData.ManualHours === "" || formData.ManualHours == null) {
                return frequencyPresets[effectiveFrequency]?.hours || 0;
            }


            return formData.ManualHours > 0 ? formData.ManualHours : frequencyPresets[effectiveFrequency]?.hours || 0;
        }

     function calculatePayroll(employee, formData, taxConfig, payclassData) {
    const effectivePayRate = getPayRate({
        IDnum: employee.IDnum,
        PayRateOverride: formData.PayRateOverride
    }, payRecords, employeeList);
    console.log(`[💲 Pay Rate]`, effectivePayRate);

    const taxRate = taxConfig.find(t => t.ID === formData.TaxProfile)?.taxRate || 0.25;
    console.log(`[📊 Tax Rate]`, taxRate);

    const effectiveHours = getEffectiveHours(formData);
    console.log(`[⏱ Effective Hours]`, effectiveHours);

    const regularPay = (formData.FixPayOverride && formData.FixPayOverride > 0) ?
        formData.FixPayOverride :
        effectiveHours * effectivePayRate;
    console.log(`[🧾 Regular Pay]`, regularPay);

    const sickPay = (formData.sickDays || 0) * effectivePayRate;
    const overtimePay = (formData.OT_Hours || 0) * effectivePayRate * (formData.OT_Rate || 0);
    const holidayPay = (formData.H_Hours || 0) * effectivePayRate * (formData.H_Rate || 0);
    const vacationPay = (formData.Vac || 0) * effectivePayRate;
    const doubleTimePay = (formData.DT_Hours || 0) * effectivePayRate * (formData.DT_Rate || 0);
    const personalPay = (formData.PersonalHours || 0) * effectivePayRate + (formData.PersonalDays || 0) * 8 * effectivePayRate;

    console.log(`[💊 Sick Pay]`, sickPay);
    console.log(`[⏰ Overtime Pay]`, overtimePay);
    console.log(`[🏖 Holiday Pay]`, holidayPay);
    console.log(`[🌴 Vacation Pay]`, vacationPay);
    console.log(`[⏫ Double Time Pay]`, doubleTimePay);
    console.log(`[🧍 Personal Pay]`, personalPay);

    const otherComponents = {
        fromHours: (formData.Other || 0) * effectivePayRate,
        fromDays: (formData.Other2 || 0) * 8 * effectivePayRate,
        fixedValue: (formData.Other3 || 0)
    };
    const calculateOther = otherComponents.fromHours + otherComponents.fromDays + otherComponents.fixedValue;
    console.log(`[➕ Other Additions]`, otherComponents, `→ Total:`, calculateOther);

    // Calculate pension deduction
    const grossPayBeforePension = regularPay + overtimePay + holidayPay + vacationPay + personalPay + 
                                 doubleTimePay + calculateOther + sickPay + 
                                 (formData.Travel || 0) + (formData.Incentive || 0) + (formData.Allowance || 0);
    
    const pensionDeduction = calculatePension(employee.IDnum, grossPayBeforePension);
    console.log(`[🏦 Pension Deduction]`, pensionDeduction);

    const employeeDeductions =
        (formData.calculatedNHT || 0) +
        (formData.calculatedNIS || 0) +
        (formData.calculatedEdTax || 0) +
        (formData.calculatedPAYE || 0) +
        pensionDeduction; // Include pension in employee deductions
    console.log(`[📉 Employee Deductions]`, employeeDeductions);

    const employerDeductions =
        (formData.calculatedHeart || 0) +
        (formData.calculatedNHT2 || 0) +
        (formData.calculatedNIS2 || 0) +
        (formData.calculatedEdTax2 || 0);
    console.log(`[📉 Employer Deductions]`, employerDeductions);

    const statutoryDeductions = employeeDeductions + employerDeductions;
    console.log(`[📉 Statutory Deductions]`, statutoryDeductions);

    const variableDeductions =
        (formData.variable_deduction1 || 0) +
        (formData.variable_deduction2 || 0) +
        (formData.variable_deduction3 || 0) +
        (formData.variable_deduction4 || 0);
    console.log(`[📉 Variable Deductions]`, variableDeductions);

    const calculateDeduction = employeeDeductions + variableDeductions;
    console.log(`[🧾 Total Deductions]`, calculateDeduction);

    const calculateGross = grossPayBeforePension;
    console.log(`[💰 Gross Pay]`, calculateGross);

    const calculateNet = calculateGross - calculateDeduction;
    console.log(`[💸 Net Pay]`, calculateNet);

    const payPeriod = calculatePayPeriod(formData);
    console.log(`[🗓 Pay Period]`, payPeriod);

    return {
        calculatedRegular: regularPay,
        calculatedOverTime: overtimePay,
        calculatedHoliday: holidayPay,
        calculatedGrossPay: calculateGross,
        calculatedTaxs: statutoryDeductions,
        calculatedVariable: variableDeductions,
        calculatedDeductions: calculateDeduction,
        calculatedNetPay: calculateNet,
        calculatedVacation: vacationPay,
        calculatedDt: doubleTimePay,
        calculatedOther: calculateOther,
        calculatedPersonal: personalPay,
        calculatedPension: pensionDeduction, // Add pension to results
        payPeriod: payPeriod,
    };
}

        function calculateRegularPay(record) {
            if (record.FixPayOverride && record.FixPayOverride > 0) {
                return record.FixPayOverride;
            }
            const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
            const effectiveHours = record.ManualHours || record.hours || 0;
            return effectiveHours * effectivePayRate;
        }

        function calculateSickPay(record) {
            if (!record.sickDays || record.sickDays === 0) {
                return 0;
            }
            const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
            return record.sickDays * effectivePayRate;
        }

        function calculateNetPay(record) {
            const grossPay = calculateRegularPay(record) + calculateSickPay(record);
            const deductions = record.calculatedTaxs + (record.variable_deduction1 || 0) + (record.variable_deduction2 || 0);
            return grossPay - deductions;
        }

        function calculateOvertimePay(record) {
            if (!record.OT_Hours || record.OT_Hours === 0) {
                return 0;
            }
            const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
            const overtimeRate = record.OT_Rate || 1.5;
            return record.OT_Hours * overtimeRate * effectivePayRate;
        }

        function calculateHolidayPay(record) {
            if (!record.H_Hours || record.H_Hours === 0) {
                return 0;
            }
            const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
            const holidayRate = record.H_Rate;
            return record.H_Hours * holidayRate * effectivePayRate;
        }

        function calculateDoubleTimePay(record) {
            if (!record.DT_Hours || record.DT_Hours === 0) {
                return 0;
            }
            const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
            const doubleTimeRate = record.DT_Rate || 2;
            return record.DT_Hours * doubleTimeRate * effectivePayRate;
        }

        function calculatePayPeriod(record) {
            try {
                const startDateString = Company_data[0]?.startDate || record.rundate;
                const start = parseDateSafe(startDateString);
                const runDate = parseDateSafe(record.rundate);

                if (isNaN(start.getTime()) || isNaN(runDate.getTime())) {
                    console.warn('Invalid dates, using fallback', {
                        start,
                        runDate
                    });
                    return 1;
                }

                const frequency = validateFrequency(record.override || record.Frequency);
                let payPeriod = 1;

                switch (frequency) {
                    case "Monthly":
                        payPeriod = ((runDate.getMonth() - start.getMonth()) + ((runDate.getFullYear() - start.getFullYear()) * 12)) % 12 + 1;
                        break;
                    case "Semi-Monthly":
                        payPeriod = Math.floor((runDate - start) / (1000 * 60 * 60 * 24 * 15)) % 24 + 1;
                        break;
                    case "Weekly":
                        payPeriod = Math.floor((runDate - start) / (1000 * 60 * 60 * 24 * 7)) % 52 + 1;
                        break;
                    case "Bi-Weekly":
                        payPeriod = Math.floor((runDate - start) / (1000 * 60 * 60 * 24 * 14)) % 26 + 1;
                        break;
                    case "Daily":
                        payPeriod = Math.floor((runDate - start) / (1000 * 60 * 60 * 24)) % 365 + 1;
                        break;
                    case "Yearly":
                        payPeriod = (runDate.getFullYear() - start.getFullYear()) % 1 + 1; // will always be 1
                        break;
                    default:
                        payPeriod = 1;
                }

                return Math.max(payPeriod, 1);

            } catch (error) {
                console.error('PayPeriod calculation failed:', error);
                return 1;
            }
        }

        function calculateYtdTracker(record) {
            try {
                const hireDate = parseDateSafe(record.HireDate || record.rundate);
                const runDate = parseDateSafe(record.rundate);

                if (isNaN(hireDate.getTime()) || isNaN(runDate.getTime())) {
                    console.warn('Invalid dates, using fallback', {
                        hireDate,
                        runDate
                    });
                    return 1;
                }

                const frequency = validateFrequency(record.override || record.Frequency);
                let ytdTracker = 1;

                switch (frequency) {
                    case "Monthly":
                        ytdTracker = ((runDate.getMonth() - hireDate.getMonth()) + ((runDate.getFullYear() - hireDate.getFullYear()) * 12)) % 12 + 1;
                        break;
                    case "Semi-Monthly":
                        ytdTracker = Math.floor((runDate - hireDate) / (1000 * 60 * 60 * 24 * 15)) % 24 + 1;
                        break;
                    case "Weekly":
                        ytdTracker = Math.floor((runDate - hireDate) / (1000 * 60 * 60 * 24 * 7)) % 52 + 1;
                        break;
                    case "Bi-Weekly":
                        ytdTracker = Math.floor((runDate - hireDate) / (1000 * 60 * 60 * 24 * 14)) % 26 + 1;
                        break;
                    case "Daily":
                        ytdTracker = Math.floor((runDate - hireDate) / (1000 * 60 * 60 * 24)) % 365 + 1;
                        break;
                    case "Yearly":
                        ytdTracker = (runDate.getFullYear() - hireDate.getFullYear()) % 1 + 1; // always 1
                        break;
                    default:
                        ytdTracker = 1;
                }

                return Math.max(ytdTracker, 1);

            } catch (error) {
                console.error('YTD calculation failed:', error);
                return 1;
            }
        }


        function isAtOrAboveRetirementAge(employee, payrollDate) {
            if (!employee.DOB || !employee.Gender) return false;
            
            const dob = new Date(employee.DOB);
            const refDate = new Date(payrollDate);
            
            let age = refDate.getFullYear() - dob.getFullYear();
            const monthDiff = refDate.getMonth() - dob.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && refDate.getDate() < dob.getDate())) {
                age--;
            }
            
            const retirementAge = employee.Gender.toLowerCase() === 'female' ? 65 : 65;
            return age >= retirementAge;
        }


        function calculateNHT(employee, formData) {
            if (isAtOrAboveRetirementAge(employee, formData.rundate)) {
                return 0;
            }
            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const taxCategory = taxCategoryData.find(t => t.ID === 1);
            const nhtRate = taxCategory.NHT || 0;
            const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
            return (nhtRate / 100) * adjustedGross;
        }

        function calculateNIS(employee, formData) {
            if (isAtOrAboveRetirementAge(employee, formData.rundate)) {
                return 0;
            }
            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const data = formData;
            const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
            let calculatedNIS = 0;
            const selectedItem = taxCategoryData.find(item => item.ID === 1);
            const nis_rate = selectedItem ? selectedItem.NIS : 0;
            if (adjustedGross > 416666.67) {
                calculatedNIS = (nis_rate / 100) * 416666.67;
            } else {
                calculatedNIS = (nis_rate / 100) * adjustedGross;
            }
            data.calculatedNIS = calculatedNIS;
            return calculatedNIS;
        }

function calculateEdTax(employee, formData) {
    const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
    const taxCategory = taxCategoryData.find(t => t.ID === 1);
    const etaxRate = taxCategory?.ETAX || 2.25; // Default to 2.25%
    // Use gross salary WITHOUT subtracting travel for EdTax
    const grossSalary = payrollResult.calculatedGrossPay || 0;
    // Calculate pension and NIS first
    const pension = calculatePension(employee.IDnum, grossSalary);
    const nis = calculateNIS(employee, formData);
    // Ed Tax is on (Gross - Pension - NIS)
    const taxableBase = grossSalary - pension - nis;
    // Ensure taxable base is not negative
    const finalTaxableBase = Math.max(taxableBase, 0);
    return (etaxRate / 100) * finalTaxableBase;
}

        function calculateEdTax(employee, formData) {
    const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
    const taxCategory = taxCategoryData.find(t => t.ID === 1);
    const etaxRate = taxCategory?.ETAX || 0;

    const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
    
    // Calculate pension and NIS first
    const pension = calculatePension(employee.IDnum, adjustedGross);
    const nis = calculateNIS(employee, formData);
    
    // Ed Tax is on (Gross - Pension - NIS)
    const taxableBase = adjustedGross - pension - nis;
    
    // Ensure taxable base is not negative
    const finalTaxableBase = Math.max(taxableBase, 0);
    
    return (etaxRate / 100) * finalTaxableBase;
}

    
       function calculatePAYE(employee, formData) {
            if (isAtOrAboveRetirementAge(employee, formData.rundate)) {
                return 0;
            }
            
            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            if (!payrollResult) {
                throw new Error('Payroll result is missing or invalid');
            }

            const taxProfileId = Number(formData.TaxProfile) || 1;
            const foundTaxConfig = taxConfigData.find(item => Number(item.ID) === taxProfileId);
            if (!foundTaxConfig) {
                throw new Error(`Tax configuration not found for profile ID: ${taxProfileId}`);
            }

            const { taxFreeThreshold, taxMaxThreshold, minTaxRate, maxTaxRate, pension } = foundTaxConfig;
            const periodMax = Math.max(Number(formData.periodMax) || 12, 1);

            const grossPay = Number(payrollResult.calculatedGrossPay) || 0;
            const travel = Number(formData.Travel) || 0;
            const adjustedGross = grossPay - travel;

            const nis = Number(formData.calculatedNIS) || 0;
            
            // Calculate actual pension contribution
            const pensionContribution = calculatePension(employee.IDnum, adjustedGross);
            
            let Deductables = nis + pensionContribution;

            let monthlyChargeable = adjustedGross - Deductables;
            if (monthlyChargeable < 0) monthlyChargeable = 0;

            const monthlyTaxFree = taxFreeThreshold / periodMax;
            const monthlyTaxMax = taxMaxThreshold / periodMax;

            let monthlyPAYE = 0;
            if (monthlyChargeable <= monthlyTaxFree) {
                monthlyPAYE = 0;
            } else if (monthlyChargeable <= monthlyTaxMax) {
                const taxedAt25 = monthlyChargeable - monthlyTaxFree;
                monthlyPAYE = taxedAt25 * (minTaxRate / 100);
            } else {
                const portionAt25 = monthlyTaxMax - monthlyTaxFree;
                const portionAt30 = monthlyChargeable - monthlyTaxMax;
                const taxAt25 = portionAt25 * (minTaxRate / 100);
                const taxAt30 = portionAt30 * (maxTaxRate / 100);
                monthlyPAYE = taxAt25 + taxAt30;
            }

            return Number(monthlyPAYE.toFixed(2));
        }


        function calculateNHT2(employee, formData) {
            if (isAtOrAboveRetirementAge(employee, formData.rundate)) {
                return 0;
            }

            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const taxCategory = taxCategoryData.find(t => t.ID === 2);
            const nhtRate = taxCategory?.NHT || 0;
            const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
            return (nhtRate / 100) * adjustedGross;
        }

        function calculateNIS2(employee, formData) {
            if (isAtOrAboveRetirementAge(employee, formData.rundate)) {
                return 0;
            }

            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const data = formData;
            const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
            let calculatedNIS = 0;
            const selectedItem = taxCategoryData.find(item => item.ID === 2);
            const nis_rate = selectedItem ? selectedItem.NIS : 0;
            if (adjustedGross > 416666.67) {
                calculatedNIS = (nis_rate / 100) * 416666.67;
            } else {
                calculatedNIS = (nis_rate / 100) * adjustedGross;
            }
            data.calculatedNIS = calculatedNIS;
            return calculatedNIS;
        }

   
        
function calculateEdTax2(employee, formData) {
    const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
    const taxCategory = taxCategoryData.find(t => t.ID === 2);
    const etaxRate = taxCategory?.ETAX || 0;

    const adjustedGross = (payrollResult.calculatedGrossPay || 0) - (formData.Travel || 0);
    
    // Calculate pension and NIS first
    const pension = calculatePension(employee.IDnum, adjustedGross);
    const nis = calculateNIS2(employee, formData); // Use employer NIS for employer portion
    
    // Ed Tax is on (Gross - Pension - NIS)
    const taxableBase = adjustedGross - pension - nis;
    
    // Ensure taxable base is not negative
    const finalTaxableBase = Math.max(taxableBase, 0);
    
    return (etaxRate / 100) * finalTaxableBase;
}

        function calculateStatutory(employee, formData) {
            const PAYE = calculatePAYE(employee, formData);
            const NIS = parseFloat(calculateNIS(employee, formData));
            const NHT = calculateNHT(employee, formData);
            const EdTax = calculateEdTax(employee, formData);
            const Heart = parseFloat(formData.calculatedHeart) || 0;
            const statutory = PAYE + NIS + NHT + EdTax + Heart;
            return Number(statutory.toFixed(2));
        }

   function calculateDeductables(employee, formData) {
    const PAYE = calculatePAYE(employee, formData);
    const NIS = parseFloat(calculateNIS(employee, formData));
    const NHT = calculateNHT(employee, formData);
    const EdTax = calculateEdTax(employee, formData);
    const Heart = parseFloat(formData.calculatedHeart) || 0;
    const statutory = PAYE + NIS + NHT + EdTax + Heart;
    
    // Add pension to deductions
    const grossPay = calculateGross(employee, formData);
    const pension = calculatePension(employee.IDnum, grossPay);
    
    const variable =
        (Number(formData.variableDeduction1) || 0) +
        (Number(formData.variableDeduction2) || 0) +
        (Number(formData.variableDeduction3) || 0) +
        (Number(formData.variableDeduction4) || 0);
        
    const total = statutory + variable + pension;
    return Number(total.toFixed(2));
}

        function calculateNetPay(employee, formData) {
            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const totalDeductions = calculateDeductables(employee, formData);
            const grossPay = Number(payrollResult.calculatedGrossPay) || 0;
            const netPay = grossPay - totalDeductions;
            return Number(netPay.toFixed(2));
        }

        function calculateGross(employee, formData) {
            const payrollResult = calculatePayroll(employee, formData, taxConfigData, payclassData);
            const grossPay = Number(payrollResult.calculatedGrossPay) || 0;
            return Number(grossPay.toFixed(2));
        }

        function calculateVacationPay(record) {
            if (!record.Vac || record.Vac === 0) {
                return 0;
            }
            const effectivePayRate = getPayRate(record, payRecords, employeeList);
            const vacationHours = record.Vac;
            return vacationHours * effectivePayRate;
        }

        function calculateOtherPay(record) {
            let totalOtherPay = 0;

            if (record.Other && record.Other > 0) {
                const effectivePayRate = getPayRate(record, payRecords, employeeList);
                totalOtherPay += record.Other * effectivePayRate;
            }

            if (record.Other2 && record.Other2 > 0) {
                const effectivePayRate = getPayRate(record, payRecords, employeeList);
                const otherHours = record.Other2 * 8;
                totalOtherPay += otherHours * effectivePayRate;
            }

            if (record.Other3 && record.Other3 > 0) {
                totalOtherPay += record.Other3;
            }

            return totalOtherPay;
        }

        function calculatePersonalPay(record) {
            let totalPersonalPay = 0;

            if (record.PersonalHours && record.PersonalHours > 0) {
                const effectivePayRate = getPayRate(record, payRecords, employeeList);
                totalPersonalPay += record.PersonalHours * effectivePayRate;
            }

            if (record.PersonalDays && record.PersonalDays > 0) {
                const effectivePayRate = getPayRate(record, payRecords, employeeList);
                const pHours = record.PersonalDays * 8;
                totalPersonalPay += pHours * effectivePayRate;
            }

            return totalPersonalPay;
        }


function calculatePension(employeeID, grossPay) {
    const employee = employeeList.find(emp => emp.IDnum === employeeID);
    if (!employee || !employee.Pension) return 0;
    
    // Ensure Pension is a decimal (e.g., 0.05 for 5%)
    const pensionRate = parseFloat(employee.Pension);
    return isNaN(pensionRate) ? 0 : grossPay * pensionRate;
}


        function generatePayslipID(employee = {}, sequentialNumber = 1) {
            const now = new Date();
            const yearPart = now.getFullYear().toString().slice(-2); // Get last 2 digits of year
            const datePart = `${yearPart}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}`;

            // Handle missing names
            const firstInitial = (employee.FirstName?.charAt(0) || 'X').toUpperCase();
            const lastInitial = (employee.LastName?.charAt(0) || 'X').toUpperCase();

            // Generate 2 random uppercase letters
            const randomLetters = String.fromCharCode(65 + Math.random() * 26 | 0) +
                String.fromCharCode(65 + Math.random() * 26 | 0);

            // Pad sequential number to always be 3 digits
            const seq = String(sequentialNumber).padStart(3, '0');

            // Construct final ID
            const payslipID = `${datePart}-${firstInitial}${lastInitial}${seq}${randomLetters}`;

            console.log(`Generated Payslip ID: ${payslipID}`); // Debugging

            return payslipID;
        }

 async function createNewPayrollRecord(emp, formData) {
    const calculations = calculatePayroll(emp, formData, taxConfigData, payclassData);
    const payPeriod = calculatePayPeriod(formData);
    const ytdTracker = calculateYtdTracker({
        ...formData,
        HireDate: emp.HireDate
    });

    const newRecID = getNewRecordID();
    const newPayslipID = generatePayslipID(emp, payRecords.length + 1);

    // Calculate pension
    const pensionDeduction = calculatePension(emp.IDnum, calculations.calculatedGrossPay);

    return {
        ...formData,
        ...calculations,
        recordID: newRecID,
        payslipID: newPayslipID,
        IDnum: emp.IDnum,
        FirstName: emp.FirstName,
        LastName: emp.LastName,
        MI: emp.MI,
        employeeName: `${emp.FirstName} ${emp.MI} ${emp.LastName}`,
        calculatedNHT: calculateNHT(emp, formData),
        calculatedNHT2: calculateNHT2(emp, formData),
        calculatedNIS: calculateNIS(emp, formData),
        calculatedNIS2: calculateNIS2(emp, formData),
        calculatedEdTax: calculateEdTax(emp, formData),
        calculatedEdTax2: calculateEdTax2(emp, formData),
        calculatedPAYE: calculatePAYE(emp, formData),
        calculatedPension: pensionDeduction, // Add pension deduction
        calculatedTaxs: calculateStatutory(emp, formData),
        calculatedDeductions: calculateDeductables(emp, formData),
        calculatedNetPay: calculateNetPay(emp, formData),
        ytdPAYE: payPeriod * calculatePAYE(emp, formData),
        ytdNHT: payPeriod * calculateNHT(emp, formData),
        ytdNIS: payPeriod * calculateNIS(emp, formData),
        ytdEDTAX: payPeriod * calculateEdTax(emp, formData),
        ytdPension: payPeriod * pensionDeduction, // YTD pension
        payPeriod,
        ytdTracker,
    };
}

        /*-------------------------------*/
        $(function() {

            /*********************************************************
             * Default function calls                                *
             *********************************************************/
            updateInfoTiles();
            fetchTemplates();
            validateCalculations();
            /**********************************************************
             * Sidebar Search abd reset functionality                 *
             **********************************************************/
            $("#searchContainer").dxTextBox({
                placeholder: "Search employees...",
                mode: "search",
                onValueChanged: function(e) {
                    const searchTerm = e.value.toLowerCase();
                    employeeListComponent.option("dataSource",
                        employeeList.filter(emp =>
                            emp.Status === "Active" && (
                                emp.IDnum.toString().includes(searchTerm) ||
                                emp.FirstName.toLowerCase().includes(searchTerm) ||
                                emp.LastName.toLowerCase().includes(searchTerm) ||
                                emp.Position.toLowerCase().includes(searchTerm)
                            )
                        )
                    );
                }
            });
            $("#clearFilter").dxButton({
                text: "Clear Filter",
                onClick: function() {
                    // Reset the grid to show ALL records
                    dataGrid.option("dataSource", payRecords);

                    // Unselect all employees in the sidebar
                    employeeListComponent.unselectAll();

                    // Clear the search text box
                    $("#searchContainer").dxTextBox("instance").reset();
                }
            });
            $(function() {
                // Initialize search box
                const searchBox = $("#searchContainer").dxTextBox({
                    placeholder: "Search employees...",
                    mode: "search",
                    onValueChanged: function(e) {
                        const searchTerm = e.value.toLowerCase();
                        employeeListComponent.option("dataSource",
                            employeeList.filter(emp =>
                                emp.Status === "Active" && (
                                    emp.IDnum.toString().includes(searchTerm) ||
                                    emp.FirstName.toLowerCase().includes(searchTerm) ||
                                    emp.LastName.toLowerCase().includes(searchTerm) ||
                                    emp.Position.toLowerCase().includes(searchTerm)
                                )
                            )
                        );
                    }
                }).dxTextBox("instance");

                // Initialize clear button
                $("#clearFilter").dxButton({
                    text: "Clear Filter",
                    onClick: function() {
                        dataGrid.option("dataSource", payRecords);
                        employeeListComponent.unselectAll();
                        searchBox.reset();
                    }
                });

                // Add loading indicator during auto-clear
                searchBox.option("value", " ");
                DevExpress.ui.notify("Refreshing data...", "info", 500);

                // Automatically trigger and clear filter on load
                setTimeout(() => {
                    // Simulate typing a character (space)
                    searchBox.option("value", " ");

                    // Immediately clear it (triggering both filters)
                    searchBox.option("value", "");
                    DevExpress.ui.notify("Ready", "success", 1000);
                }, 300);
            });

            /*********************************************************
             * EMPLOYEE SIDEBAR LIST                                 *
             *********************************************************/
            const employeeListComponent = $("#employeeList").dxList({

                dataSource: employeeList.filter(e => e.Status === "Active"),
                selectionMode: "single",
                searchEnabled: false,
                height: "100%",
                itemTemplate: function(itemData) {
                    return $("<div>")
                        .addClass("employee-list-item")
                        .html(`
                <div style="flex:1">
                    <strong>${itemData.IDnum}</strong><br>
                    ${itemData.FirstName} ${itemData.LastName}<br>
                    <small style="color: teal">${itemData.Position}</small>
                </div>
            `);
                },
                onItemClick: function(e) {
                    const employee = e.itemData;
                    // Filter grid for just the selected employee's records
                    dataGrid.option("dataSource",
                        payRecords.filter(record => record.IDnum === employee.IDnum)
                    );
                }
            }).dxList("instance");


            /***************************************************************
             * 6A) "BATCH CREATE" POPUP                                     * 
             ***************************************************************/
            const batchPopup = $("#batchCreatePopup").dxPopup({
                visible: false,
                title: "Payroll Processing",
                width: 900,
                height: 800,
                maxHeight: 800,
                animation: {
                    show: {
                        type: "pop",
                        duration: 200,
                        from: {
                            scale: 0.1
                        },
                        to: {
                            scale: 1
                        }
                    },
                    hide: {
                        type: "slide",
                        duration: 300,
                        from: {
                            top: 0
                        },
                        to: {
                            top: -1000
                        }
                    }
                },
                contentTemplate: function() {
                    const $formContainer = $("<div>")
                        .addClass("form-scroll")
                        .css({
                            "max-height": "650px",
                            "overflow-y": "auto",
                            "padding-right": "10px",
                            "box-sizing": "border-box"
                        });
                    $formContainer.dxForm({
                        formData: {
                            employees: [],
                            rundate: new Date(),
                            Frequency: null,
                            PayRate: 0,
                            ...frequencyPresets['Monthly'],
                            ...baseTemplate
                        },
                        items: [{
                                itemType: 'group',
                                colCount: 1,
                                colSpan: 2,
                                caption: '',
                                items: [{
                                    dataField: "employees",
                                    label: {
                                        text: "Select Employees"
                                    },
                                    editorType: "dxTagBox",
                                    validationRules: [{
                                        type: 'required'
                                    }],
                                    editorOptions: {
                                        dataSource: employeeList.filter(e => e.Status === "Active"),
                                        displayExpr: item => item ?
                                            (item.IDnum + " - " + item.Title + " " + item.FirstName + " " + item.LastName) : "",
                                        valueExpr: "ID",
                                        searchEnabled: true,
                                        showSelectionControls: true,
                                        placeholder: "Pick multiple employees",
                                        usePopover: true,
                                        showDropDownButton: true,
                                        useNativeScrolling: true,
                                        pageLoadMode: "scrollBottom"
                                    }
                                }]
                            },
                            {
                                itemType: 'group',
                                colCount: 2,
                                colSpan: 1,
                                caption: '',
                                items: [{
                                        dataField: "template",
                                        label: {
                                            text: "Payroll Template"
                                        },
                                        editorType: "dxSelectBox",
                                        editorOptions: {
                                            dataSource: payrollTemplates,
                                            displayExpr: "name",
                                            valueExpr: "name",
                                            placeholder: "No templates available",
                                            disabled: payrollTemplates.length === 0,
                                            value: (payrollTemplates && payrollTemplates.length > 0) ? payrollTemplates[0].name : null,
                                            onValueChanged: function(e) {
                                                const form = batchPopup.content().find(".dx-form").dxForm("instance");
                                                const selectedTemplate = payrollTemplates.find(t => t.name === e.value);
                                                if (selectedTemplate) {
                                                    const currentData = form.option("formData");
                                                    form.option("formData", {
                                                        ...currentData,
                                                        ...selectedTemplate,
                                                        PayRate: currentData.PayRate,
                                                        PayRateOverride: selectedTemplate.PayRateOverride || 0,
                                                        employees: currentData.employees
                                                    });
                                                };
                                            }
                                        }
                                    },
                                    {
                                        dataField: 'rundate',
                                        label: {
                                            text: 'Set payroll date'
                                        },
                                        editorType: "dxDateBox",
                                        editorOptions: {
                                            type: "date",
                                            value: new Date(),
                                            onInitialized: function(e) {
                                                runDatePicker = e.component;
                                            },
                                            onValueChanged: function(e) {
                                                // console.log("runDatePicker changed:", e.value);
                                            }
                                        },
                                        validationRules: [{
                                            type: 'required'
                                        }]
                                    }
                                ]
                            },
                            {
                                itemType: 'tabbed',
                                tabPanelOptions: {
                                    height: 'auto',
                                    animationEnabled: true,
                                    swipeEnabled: true
                                },
                                tabs: [
                                    {
                                        title: "1. General Setting",
                                        items: [{
                                            itemType: 'group',
                                            colCount: 2,
                                            colSpan: 2,
                                            caption: '',
                                            items: [{
                                                    dataField: 'ManualHours',
                                                    label: {
                                                        text: 'Hours Override'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Manual Hours cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'override',
                                                    label: {
                                                        text: 'Frequency Override'
                                                    },
                                                    editorType: 'dxSelectBox',
                                                    editorOptions: {
                                                        dataSource: payFrequencyData,
                                                        displayExpr: 'Frequency',
                                                        valueExpr: 'Frequency',
                                                        onValueChanged: function(e) {
                                                            const form = batchPopup.content().find(".dx-form").dxForm("instance");
                                                            const formData = form.option("formData");
                                                            const newFrequency = e.value;
                                                            const newHours = frequencyPresets[newFrequency]?.hours || 0;
                                                            const newPeriodMax = frequencyPresets[newFrequency]?.periodMax || 0;
                                                            form.option('formData.hours', newHours);
                                                            form.option('formData.periodMax', newPeriodMax);
                                                            form.option('formData.payPeriod', 1);
                                                            if (formData.FixPayOverride > 0) {
                                                                const newPayRate = formData.FixPayOverride / newHours;
                                                                form.option('formData.PayRateOverride', newPayRate);
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    dataField: 'taxType',
                                                    editorType: 'dxSelectBox',
                                                    label: {
                                                        text: 'Tax Category'
                                                    },
                                                    editorOptions: {
                                                        dataSource: taxCategoryData,
                                                        displayExpr: 'taxType',
                                                        valueExpr: 'ID',
                                                        value: (taxCategoryData && taxCategoryData.length > 0) ? taxCategoryData[0].ID : null
                                                    },
                                                    validationRules: [{
                                                        type: 'required'
                                                    }],
                                                },
                                                {
                                                    dataField: 'TaxProfile',
                                                    editorType: 'dxSelectBox',
                                                    label: {
                                                        text: 'Tax Profile'
                                                    },
                                                    validationRules: [{
                                                        type: 'required'
                                                    }],
                                                    editorOptions: {
                                                        dataSource: taxConfigData,
                                                        displayExpr: 'description',
                                                        valueExpr: 'ID',
                                                        value: (taxConfigData && taxConfigData.length > 0) ? taxConfigData[0].ID : null
                                                    },
                                                },
                                                {
                                                    dataField: 'OT_Rate',
                                                    editorType: 'dxSelectBox',
                                                    label: {
                                                        text: 'Overtime payclass'
                                                    },
                                                    editorOptions: {
                                                        dataSource: payclassData,
                                                        displayExpr: 'payClass',
                                                        valueExpr: 'rate',
                                                    },
                                                },
                                                {
                                                    dataField: 'H_Rate',
                                                    editorType: 'dxSelectBox',
                                                    editorOptions: {
                                                        dataSource: payclassData,
                                                        displayExpr: 'payClass',
                                                        valueExpr: 'rate',
                                                    },
                                                    label: {
                                                        text: 'Holiday payclass'
                                                    },
                                                },
                                                {
                                                    dataField: 'PayRateOverride',
                                                    label: {
                                                        text: 'Pay Rate Override'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: 0
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Pay rate over ride cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'FixPayOverride',
                                                    label: {
                                                        text: 'Fix Pay Override'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Fix Pay Override cannot be negative'
                                                    }]
                                                }
                                            ]
                                        }]
                                    },
                                    {
                                        title: "2. Time Off Options",
                                        items: [{
                                            itemType: 'group',
                                            colCount: 2,
                                            colSpan: 2,
                                            caption: '',
                                            items: [{
                                                    dataField: 'PersonalHours',
                                                    label: {
                                                        text: 'Personal Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Personal hours cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'PersonalDays',
                                                    label: {
                                                        text: 'Personal Days'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Personal days cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Vac',
                                                    label: {
                                                        text: 'Vacation Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Vacation hours cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'sickDays',
                                                    label: {
                                                        text: 'Sick Days'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Sick days cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Description',
                                                    label: {
                                                        text: 'Others Description'
                                                    },
                                                },
                                                {
                                                    dataField: 'Other',
                                                    label: {
                                                        text: 'Other Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'This cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Other2',
                                                    label: {
                                                        text: 'Other Days'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'This cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Other3',
                                                    label: {
                                                        text: 'Other fixed Value'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'This cannot be negative'
                                                    }]
                                                }
                                            ]
                                        }]
                                    },
                                    {
                                        title: "3. Add-ons options",
                                        items: [{
                                            itemType: 'group',
                                            colCount: 2,
                                            colSpan: 2,
                                            caption: '',
                                            items: [{
                                                    dataField: 'OT_Hours',
                                                    label: {
                                                        text: 'Overtime Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Over time hours cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'DT_Hours',
                                                    label: {
                                                        text: 'DoubleTime Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Double time hours cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'H_Hours',
                                                    label: {
                                                        text: 'Holiday Hours'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        max: 24,
                                                        message: 'Holiday hours must be 0-24'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Incentive',
                                                    label: {
                                                        text: 'Incentive'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Incentive cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Travel',
                                                    label: {
                                                        text: 'Travel'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Travel cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'Allowance',
                                                    label: {
                                                        text: 'Allowance'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Allowance cannot be negative'
                                                    }]
                                                }
                                            ]
                                        }]
                                    },
                                    {
                                        title: "4. Deduction",
                                        items: [{
                                            itemType: 'group',
                                            colCount: 2,
                                            colSpan: 2,
                                            caption: '',
                                            items: [{
                                                    dataField: 'variable_description1',
                                                    label: {
                                                        text: 'Variable Description 1'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction1',
                                                    label: {
                                                        text: 'Variable Amount 1'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description2',
                                                    label: {
                                                        text: 'Variable Description 2'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction2',
                                                    label: {
                                                        text: 'Variable Amount 2'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description3',
                                                    label: {
                                                        text: 'Variable Description 3'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction3',
                                                    label: {
                                                        text: 'Variable Amount 3'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description4',
                                                    label: {
                                                        text: 'Variable Description 4'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction4',
                                                    label: {
                                                        text: 'Variable Amount 4'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description5',
                                                    label: {
                                                        text: 'Variable Description 5'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction5',
                                                    label: {
                                                        text: 'Variable Amount 5'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description6',
                                                    label: {
                                                        text: 'Variable Description 6'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction6',
                                                    label: {
                                                        text: 'Variable Amount 6'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description7',
                                                    label: {
                                                        text: 'Variable Description 7'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction7',
                                                    label: {
                                                        text: 'Variable Amount 7'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                },
                                                {
                                                    dataField: 'variable_description8',
                                                    label: {
                                                        text: 'Variable Description 8'
                                                    },
                                                },
                                                {
                                                    dataField: 'variable_deduction8',
                                                    label: {
                                                        text: 'Variable Amount 8'
                                                    },
                                                    editorType: 'dxNumberBox',
                                                    editorOptions: {
                                                        min: 0,
                                                        showSpinButtons: false,
                                                        value: ''
                                                    },
                                                    validationRules: [{
                                                        type: 'range',
                                                        min: 0,
                                                        message: 'Variable deduction cannot be negative'
                                                    }]
                                                }
                                            ]
                                        }]
                                    }
                                ]
                            }
                        ],
                        showColonAfterLabel: false,
                        minColWidth: 200
                    });
                    return $formContainer;
                },
                toolbarItems: [
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "before",
                        options: {
                            text: "Save Template",
                            onClick: function() {
                                const form = batchPopup.content().find(".dx-form").dxForm("instance");
                                const formData = form.option("formData");
                                const templateData = {
                                    Frequency: formData.Frequency,
                                    hours: formData.hours,
                                    payPeriod: formData.payPeriod,
                                    periodMax: formData.periodMax,
                                    ...baseTemplate,
                                    ...frequencyPresets[formData.override || formData.Frequency],
                                    ManualHours: formData.ManualHours,
                                    override: formData.override,
                                    taxType: formData.taxType,
                                    TaxProfile: formData.TaxProfile,
                                    OT_Rate: formData.OT_Rate,
                                    H_Rate: formData.H_Rate,
                                    DT_Rate: formData.DT_Rate,
                                    PayRateOverride: formData.PayRateOverride,
                                    FixPayOverride: formData.FixPayOverride,
                                    PersonalHours: formData.PersonalHours,
                                    PersonalDays: formData.PersonalDays,
                                    Vac: formData.Vac,
                                    sickDays: formData.sickDays,
                                    Description: formData.Description,
                                    Other: formData.Other,
                                    Other2: formData.Other2,
                                    Other3: formData.Other3,
                                    OT_Hours: formData.OT_Hours,
                                    DT_Hours: formData.DT_Hours,
                                    H_Hours: formData.H_Hours,
                                    Incentive: formData.Incentive,
                                    Travel: formData.Travel,
                                    Allowance: formData.Allowance,
                                    variable_description1: formData.variable_description1,
                                    variable_deduction1: formData.variable_deduction1,
                                    variable_description2: formData.variable_description2,
                                    variable_deduction2: formData.variable_deduction2,
                                    variable_description3: formData.variable_description3,
                                    variable_deduction3: formData.variable_deduction3,
                                    variable_description4: formData.variable_description4,
                                    variable_deduction4: formData.variable_deduction4,
                                    variable_description5: formData.variable_description5,
                                    variable_deduction5: formData.variable_deduction5,
                                    variable_description6: formData.variable_description6,
                                    variable_deduction6: formData.variable_deduction6,
                                    variable_description7: formData.variable_description7,
                                    variable_deduction7: formData.variable_deduction7,
                                    variable_description8: formData.variable_description8,
                                    variable_deduction8: formData.variable_deduction8
                                };
                                Swal.fire({
                                    title: 'Save Template',
                                    input: 'text',
                                    inputLabel: 'Template Name',
                                    showCancelButton: true,
                                    confirmButtonText: 'Save',
                                    cancelButtonText: 'Cancel',
                                    customClass: {
                                        confirmButton: 'swal-confirm-btn',
                                        cancelButton: 'swal-cancel-btn'
                                    },
                                    preConfirm: (name) => {
                                        if (!name) {
                                            Swal.showValidationMessage('Name is required');
                                            return;
                                        }
                                        const exists = payrollTemplates.some(t =>
                                            t.name.toLowerCase() === name.toLowerCase()
                                        );
                                        if (exists) {
                                            Swal.showValidationMessage('Template name already exists');
                                        }
                                        return name;
                                    }
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        const newTemplate = {
                                            name: result.value,
                                            ...templateData
                                        };
                                        payrollTemplates.push(newTemplate);
                                        const templateSelector = form.getEditor("template");
                                        templateSelector.option("dataSource", [...payrollTemplates]);
                                        templateSelector.option("value", newTemplate.name);
                                        $.ajax({
                                            url: "../database/save_template.php",
                                            method: "POST",
                                            contentType: "application/json",
                                            data: JSON.stringify(payrollTemplates),
                                            success: function(response) {
                                                Swal.fire({
                                                    title: 'Saved!',
                                                    text: 'Template has been saved.',
                                                    icon: 'success',
                                                    timer: 1000,
                                                    showConfirmButton: false
                                                });
                                            },
                                            error: function(xhr) {
                                                payrollTemplates.pop();
                                                templateSelector.option("dataSource", [...payrollTemplates]);
                                                templateSelector.option("value", null);
                                                Swal.fire({
                                                    title: 'Save Failed!',
                                                    text: 'Template could not be saved to server',
                                                    icon: 'error',
                                                    timer: 2000
                                                });
                                            }
                                        });
                                    }
                                });
                                batchPopup.hide();
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "before",
                        options: {
                            text: "Import & Process",
                            onClick: function() {
                                // Capture the date picker value BEFORE hiding the popup
                                const selectedRunDate = runDatePicker ? runDatePicker.option("value") : new Date();
                                
                                if (batchPopup && batchPopup.option("visible")) {
                                    batchPopup.hide();
                                }
                                
                                // Get the current form data including selected Tax Profile
                                const form = batchPopup.content().find(".dx-form").dxForm("instance");
                                const currentFormData = form.option("formData");
                                
                                const fileInput = document.createElement('input');
                                fileInput.type = 'file';
                                fileInput.accept = '.xlsx, .xls';
                                fileInput.addEventListener('change', async (event) => {
                                    const file = event.target.files[0];
                                    if (!file) return;
                                    
                                    Swal.fire({
                                        title: 'Processing...',
                                        html: 'Please wait while we process your file',
                                        allowOutsideClick: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });
                                    
                                    try {
                                        const reader = new FileReader();
                                        reader.onload = async (e) => {
                                            try {
                                                const data = new Uint8Array(e.target.result);
                                                const workbook = XLSX.read(data, {
                                                    type: 'array',
                                                    cellDates: true
                                                });
                                                const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                                                const jsonData = XLSX.utils.sheet_to_json(worksheet, {
                                                    header: 1,
                                                    defval: ''
                                                });
                                                
                                                if (!jsonData.length) throw new Error("The file is empty or improperly formatted.");
                                                
                                                // Comprehensive header mapping
                                                const headerMap = {
                                                    // User ID variations
                                                    'User Id': 'IDnum',
                                                    'UserID': 'IDnum',
                                                    'User_ID': 'IDnum',
                                                    'Emp ID': 'IDnum',
                                                    'EmpID': 'IDnum',
                                                    'Employee ID': 'IDnum',
                                                    'EmployeeID': 'IDnum',
                                                    // Time-off categories from image
                                                    'O/T': 'OT_Hours',
                                                    'OT': 'OT_Hours',
                                                    'Overtime': 'OT_Hours',
                                                    'D/T': 'DT_Hours',
                                                    'DT': 'DT_Hours',
                                                    'Double Time': 'DT_Hours',
                                                    'Sick': 'sickDays',
                                                    'Sick Days': 'sickDays',
                                                    'Vac': 'Vac',
                                                    'Vacation': 'Vac',
                                                    'Vacation Hours': 'Vac',
                                                    'Holiday': 'H_Hours',
                                                    'Holiday Hours': 'H_Hours',
                                                    'Personal': 'PersonalHours',
                                                    'Personal Hours': 'PersonalHours',
                                                    'Other': 'Other',
                                                    'Other Hours': 'Other',
                                                    // Tax Profile mappings
                                                    'Tax Profile': 'TaxProfile',
                                                    'TaxProfile': 'TaxProfile',
                                                    'Tax': 'TaxProfile',
                                                    // Existing mappings
                                                    'Regular': 'ManualHours',
                                                    'Deductions': 'variable_deduction1',
                                                    // Additional common headers
                                                    'First Name': 'FirstName',
                                                    'Last Name': 'LastName',
                                                    'Full Name': 'employeeName',
                                                    'Pay Date': 'rundate',
                                                    'Hired On': 'HireDate',
                                                    'Frequency': 'Frequency',
                                                    'Period': 'payPeriod',
                                                    'YTD Period': 'ytdTracker',
                                                    'Period Max': 'periodMax',
                                                    'Pay Rate': 'PayRate',
                                                    'Rate Override': 'PayRateOverride',
                                                    'Hours': 'ManualHours',
                                                    'Travel': 'Travel',
                                                    'Incentive': 'Incentive',
                                                    'Allowance': 'Allowance',
                                                    'Pay Date': 'rundate',
                                                };
                                                
                                                // Case-insensitive header mapping
                                                const headers = jsonData[0].map(h => {
                                                    const cleanHeader = h.toString().trim();
                                                    const normalizedHeader = cleanHeader.toLowerCase();
                                                    // Find matching key in headerMap (case-insensitive)
                                                    const matchingKey = Object.keys(headerMap).find(key =>
                                                        key.toLowerCase() === normalizedHeader
                                                    );
                                                    return matchingKey ? headerMap[matchingKey] : cleanHeader;
                                                }).filter(h => h !== 'recordID');
                                                
                                                const importedRecords = [];
                                                const importErrors = [];
                                                
                                                for (const [index, row] of jsonData.slice(1).entries()) {
                                                    try {
                                                        const rawRecord = headers.reduce((obj, header, colIndex) => {
                                                            let value = row[colIndex] ?? '';
                                                            
                                                            // Special handling for date fields
                                                            if (header === 'rundate') {
                                                                // Use the value from the file if available and valid, otherwise use the selectedRunDate
                                                                let dateValue = value;
                                                                if (dateValue && dateValue !== '') {
                                                                    // Try to parse the date from the file
                                                                    const parsedDate = new Date(dateValue);
                                                                    if (!isNaN(parsedDate.getTime())) {
                                                                        value = parsedDate;
                                                                    } else {
                                                                        // If parsing fails, use the selectedRunDate
                                                                        value = selectedRunDate;
                                                                    }
                                                                } else {
                                                                    value = selectedRunDate;
                                                                }
                                                                value = value instanceof Date 
                                                                    ? value.toISOString().split("T")[0] 
                                                                    : formatDateStorage(value);
                                                            }
                                                            
                                                            if (header === 'HireDate') {
                                                                if (value instanceof Date) {
                                                                    value = value.toISOString().split('T')[0];
                                                                } else {
                                                                    value = formatDateStorage(value);
                                                                }
                                                            }
                                                            
                                                            // Special handling for frequency fields
                                                            if (header === 'Frequency' || header === 'override') {
                                                                value = validateFrequency(value.toString());
                                                            }
                                                            
                                                            // Special handling for numeric fields
                                                            if (['PayRate', 'hours', 'OT_Hours', 'DT_Hours', 'sickDays',
                                                                    'Vac', 'H_Hours', 'PersonalHours', 'Other',
                                                                    'variable_deduction1', 'variable_deduction2', 'variable_deduction3', 'variable_deduction4',
                                                                    'variable_deduction5', 'variable_deduction6', 'variable_deduction7', 'variable_deduction8',
                                                                    'Travel', 'Incentive', 'Allowance'
                                                                ].includes(header)) {
                                                                value = Number(value) || 0;
                                                            }
                                                            
                                                            // Use form's Tax Profile if not specified in import file
                                                            if (header === 'TaxProfile' && !value) {
                                                                value = currentFormData.TaxProfile;
                                                            }
                                                            
                                                            obj[header] = value;
                                                            return obj;
                                                        }, {});
                                                        
                                                        // Ensure TaxProfile has a value even if column not present
                                                        if (!rawRecord.TaxProfile) {
                                                            rawRecord.TaxProfile = currentFormData.TaxProfile;
                                                        }
                                                        
                                                        // Validate required User ID
                                                        if (!rawRecord.IDnum) {
                                                            throw new Error(`Missing User ID`);
                                                        }
                                                        
                                                        // If PayRate is not provided in import, get it from employee data
                                                        if ((!rawRecord.PayRate || rawRecord.PayRate === 0) && rawRecord.IDnum) {
                                                            const employee = employeeList.find(e => e.IDnum === rawRecord.IDnum);
                                                            if (employee && employee.PayRate) {
                                                                rawRecord.PayRate = employee.PayRate;
                                                            }
                                                        }
                                                        
                                                        // Validate time-off categories
                                                        const timeOffFields = ['OT_Hours', 'DT_Hours', 'sickDays', 'Vac', 'H_Hours', 'PersonalHours', 'Other'];
                                                        timeOffFields.forEach(field => {
                                                            if (rawRecord[field] !== undefined && isNaN(Number(rawRecord[field]))) {
                                                                throw new Error(`Invalid ${field} value`);
                                                            }
                                                        });
                                                        
                                                        const emp = employeeList.find(e => e.IDnum === rawRecord.IDnum);
                                                        if (!emp) {
                                                            throw new Error(`Invalid employee ${rawRecord.IDnum}`);
                                                        }
                                                        
                                                        rawRecord.HireDate = parseDateSafe(emp.HireDate || rawRecord.rundate).toISOString().split('T')[0];
                                                        
                                                        const fullRecord = {
                                                            ...baseTemplate,
                                                            ...frequencyPresets[rawRecord.override || rawRecord.Frequency],
                                                            ...rawRecord
                                                        };
                                                        
                                                        const newRecord = await createNewPayrollRecord(emp, fullRecord);
                                                        
                                                        if (isNaN(newRecord.payPeriod) || isNaN(newRecord.ytdTracker)) {
                                                            throw new Error('Invalid calculations');
                                                        }
                                                        
                                                        importedRecords.push(newRecord);
                                                        payRecords.push(newRecord);
                                                    } catch (error) {
                                                        console.error(`Row ${index + 1} processing failed:`, error);
                                                        importErrors.push({
                                                            row: index + 1,
                                                            error: error.message
                                                        });
                                                    }
                                                }
                                                
                                                if (!importedRecords.length && importErrors.length > 0) {
                                                    throw new Error("No valid records found to import.");
                                                }
                                                
                                                const store = new DevExpress.data.ArrayStore({
                                                    data: payRecords,
                                                    key: "recordID"
                                                });
                                                
                                                dataGrid.option("dataSource", new DevExpress.data.DataSource({
                                                    store: store
                                                }));
                                                
                                                dataGrid.refresh();
                                                
                                                await $.ajax({
                                                    url: "../database/save_payslips.php",
                                                    method: "POST",
                                                    contentType: "application/json",
                                                    data: JSON.stringify(payRecords),
                                                });
                                                
                                                Swal.close();
                                                
                                                // Show results with error details if any
                                                if (importErrors.length > 0) {
                                                    Swal.fire({
                                                        icon: 'warning',
                                                        title: 'Import Completed with Issues',
                                                        html: `Successfully imported ${importedRecords.length} records<br>
                                                            ${importErrors.length} rows had errors:<br>
                                                            ${importErrors.map(e => `Row ${e.row}: ${e.error}`).join('<br>')}`,
                                                        width: 600,
                                                        confirmButtonText: 'OK'
                                                    });
                                                } else {
                                                    Swal.fire({
                                                        icon: 'success',
                                                        title: `Imported ${importedRecords.length} records`,
                                                        html: `New indexes: ${importedRecords.map(r => r.recordID).join(', ')}`,
                                                        showConfirmButton: false,
                                                        timer: 2000,
                                                    });
                                                }
                                            } catch (error) {
                                                Swal.close();
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Import Failed',
                                                    text: error.message,
                                                    timer: 3000
                                                });
                                            }
                                        };
                                        reader.readAsArrayBuffer(file);
                                    } catch (error) {
                                        Swal.close();
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Import Failed',
                                            text: error.message,
                                            timer: 3000
                                        });
                                    }
                                });
                                fileInput.click();
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Create",
                            type: "success",
                            onClick: async function() {
                                const form = batchPopup.content().find(".dx-form").dxForm("instance");
                                const formData = form.option("formData");
                                
                                if (formData.FixPayOverride === undefined) {
                                    formData.FixPayOverride = 0;
                                }
                                
                                const selectedIDs = formData.employees;
                                
                                if (!selectedIDs || selectedIDs.length === 0) {
                                    DevExpress.ui.notify("No employees selected!", "warning", 2000);
                                    return;
                                }
                                
                                batchPopup.hide();
                                
                                form.option("formData", {
                                    employees: [],
                                    rundate: runDatePicker ? runDatePicker.option("value") : new Date(),
                                    Frequency: "Monthly",
                                    PayRate: 0,
                                    hours: 0
                                });
                                
                                const processingAlert = Swal.fire({
                                    title: 'Processing Employees',
                                    html: `Starting payroll processing...`,
                                    allowOutsideClick: true,
                                    showConfirmButton: true,
                                    confirmButtonText: 'Process in the background',
                                    confirmButtonColor: 'teal',
                                    didOpen: () => Swal.showLoading()
                                });
                                
                                try {
                                    const totalEmployees = selectedIDs.length;
                                    let lastProcessedCount = 0;
                                    
                                    const processEmployee = async (empID) => {
                                        const emp = employeeList.find(e => e.ID === empID);
                                        if (!emp) return;
                                        
                                        const employeeFrequency = emp.Frequency;
                                        const effectiveFrequency = formData.override || employeeFrequency;
                                        const frequencySettings = frequencyPresets[effectiveFrequency] || {};
                                        
                                        const calculations = calculatePayroll(emp, formData, taxConfigData, payclassData);
                                        const payPeriod = calculatePayPeriod({
                                            rundate: formData.rundate,
                                            override: formData.override,
                                            Frequency: formData.Frequency
                                        });
                                        const ytdTracker = calculateYtdTracker({
                                            rundate: formData.rundate,
                                            override: formData.override,
                                            Frequency: effectiveFrequency,
                                            HireDate: emp.HireDate
                                        });
                                        
                                        const calculatedEdTax = calculateEdTax(emp, formData);
                                        const calculatedNHT = calculateNHT(emp, formData);
                                        const calculatedNHT2 = calculateNHT2(emp, formData);
                                        const calculatedNIS = calculateNIS(emp, formData);
                                        const calculatedNIS2 = calculateNIS2(emp, formData);
                                        const calculatedPAYE = calculatePAYE(emp, formData);
                                        const calculatedTaxs = calculateStatutory(emp, formData);
                                        const calculatedDeductions = calculateDeductables(emp, formData);
                                        const calculatedNetPay = calculateNetPay(emp, formData);
                                        
                                        // ====== CORRECTED YTD CALCULATIONS ======
                                        // Get all previous records for this employee with date < current date
                                        const currentDate = new Date(formData.rundate);
                                        const previousRecords = payRecords.filter(record =>
                                            record.IDnum === emp.IDnum &&
                                            new Date(record.rundate) < currentDate
                                        );
                                        
                                        // Calculate ytdNIS
                                        const sumPreviousNIS = previousRecords.reduce((sum, record) => {
                                            return sum + (record.calculatedNIS || 0);
                                        }, 0);
                                        const newYtdNIS = sumPreviousNIS + calculatedNIS;
                                        
                                        // Calculate ytdNHT
                                        const sumPreviousNHT = previousRecords.reduce((sum, record) => {
                                            return sum + (record.calculatedNHT || 0);
                                        }, 0);
                                        const newYtdNHT = sumPreviousNHT + calculatedNHT;
                                        
                                        // Calculate ytdEDTAX
                                        const sumPreviousEdTax = previousRecords.reduce((sum, record) => {
                                            return sum + (record.calculatedEdTax || 0);
                                        }, 0);
                                        const newYtdEdTax = sumPreviousEdTax + calculatedEdTax;
                                        
                                        // Calculate ytdPAYE
                                        const sumPreviousPAYE = previousRecords.reduce((sum, record) => {
                                            return sum + (record.calculatedPAYE || 0);
                                        }, 0);
                                        const newYtdPAYE = sumPreviousPAYE + calculatedPAYE;
                                        
                                        const calculatedGrossPay = calculatedDeductions + calculatedNetPay;
                                        
                                        const newRecID = getNewRecordID();
                                        const newPayslipID = generatePayslipID(emp, payRecords.length + 1);
                                        
                                        const {
                                            employees,
                                            ...cleanFormData
                                        } = formData;
                                        
                                        const newRecord = {
                                            ...cleanFormData,
                                            ...calculations,
                                            ...frequencySettings,
                                            Frequency: effectiveFrequency,
                                            payslipID: newPayslipID,
                                            recordID: newRecID,
                                            IDnum: emp.IDnum,
                                            FirstName: emp.FirstName,
                                            LastName: emp.LastName,
                                            MI: emp.MI,
                                            TRN: emp.TRN,
                                            NIS: emp.NIS,
                                            employeeName: `${emp.FirstName} ${emp.MI} ${emp.LastName}`,
                                            HireDate: emp.HireDate,
                                            calculatedNHT: calculatedNHT,
                                            calculatedNHT2: calculatedNHT2,
                                            calculatedNIS: calculatedNIS,
                                            calculatedNIS2: calculatedNIS2,
                                            calculatedEdTax: calculatedEdTax,
                                            calculatedEdTax2: calculateEdTax2(emp, formData),
                                            calculatedPAYE: calculatedPAYE,
                                            calculatedTaxs: calculatedTaxs,
                                            calculatedDeductions: calculatedDeductions,
                                            calculatedNetPay: calculatedNetPay,
                                            payPeriod: payPeriod,
                                            ytdTracker: ytdTracker,
                                            // Use the corrected ytd calculations
                                            ytdNIS: newYtdNIS,
                                            ytdNHT: newYtdNHT,
                                            ytdEDTAX: newYtdEdTax,
                                            ytdPAYE: newYtdPAYE,
                                            calculatedRegular: calculateRegularPay(formData),
                                            sickDays: formData.sickDays || 0,
                                            calculatedSick: calculateSickPay(formData),
                                            H_Hours: formData.H_Hours || 0,
                                            calculatedHoliday: calculateHolidayPay(formData),
                                            OT_Rate: formData.OT_Rate,
                                            OT_Hours: formData.OT_Hours,
                                            calculatedOverTime: calculateOvertimePay(formData),
                                            DT_Rate: formData.DT_Rate,
                                            DT_Hours: formData.DT_Hours,
                                            calculatedDt: calculateDoubleTimePay(formData),
                                            Vac: formData.Vac,
                                            calculatedVacation: calculateVacationPay(formData),
                                            Description: formData.Description,
                                            Other: formData.Other,
                                            Other2: formData.Other2,
                                            Other3: formData.Other3,
                                            calculatedOther: calculateOtherPay(formData),
                                            PersonalHours: formData.PersonalHours,
                                            PersonalDays: formData.PersonalDays,
                                            calculatedPersonal: calculatePersonalPay(formData),
                                            calculatedGrossPay: calculatedGrossPay,
                                            employeeID: formData.ID,
                                            override: formData.override,
                                            rundate: runDatePicker ? runDatePicker.option("value") : formData.rundate || new Date(),
                                            PayRate: getPayRate(emp, [], employeeList),
                                            PayRateOverride: formData.PayRateOverride,
                                            FixPayOverride: formData.FixPayOverride,
                                            hours: formData.hours,
                                            periodMax: formData.periodMax,
                                            ManualHours: formData.ManualHours,
                                            Travel: formData.Travel,
                                            Incentive: formData.Incentive,
                                            Allowance: formData.Allowance,
                                            calculatedHeart: formData.calculatedHeart,
                                            variable_description1: formData.variable_description1,
                                            variable_deduction1: formData.variable_deduction1,
                                            variable_description2: formData.variable_description2,
                                            variable_deduction2: formData.variable_deduction2,
                                            variable_description3: formData.variable_description3,
                                            variable_deduction3: formData.variable_deduction3,
                                            variable_description4: formData.variable_description4,
                                            variable_deduction4: formData.variable_deduction4,
                                            variable_description5: formData.variable_description5,
                                            variable_deduction5: formData.variable_deduction5,
                                            variable_description6: formData.variable_description6,
                                            variable_deduction6: formData.variable_deduction6,
                                            variable_description7: formData.variable_description7,
                                            variable_deduction7: formData.variable_deduction7,
                                            variable_description8: formData.variable_description8,
                                            variable_deduction8: formData.variable_deduction8,
                                            TaxProfile: formData.TaxProfile,
                                            H_Rate: formData.H_Rate,
                                            override: formData.override
                                        };
                                        
                                        console.log("New Record Added:", newRecord);
                                        payRecords.push(newRecord);
                                        
                                        await new Promise(resolve => setTimeout(resolve, 15));
                                    };
                                    
                                    const processInChunks = async (ids, chunkSize = 1) => {
                                        for (let i = 0; i < ids.length; i += chunkSize) {
                                            const chunk = ids.slice(i, i + chunkSize);
                                            await Promise.all(chunk.map(processEmployee));
                                            
                                            lastProcessedCount = Math.min(i + chunkSize, ids.length);
                                            processingAlert.update({
                                                html: `Processed ${lastProcessedCount}/${totalEmployees} employees`
                                            });
                                            
                                            dataGrid.refresh();
                                            
                                            await new Promise(resolve => setTimeout(resolve, 15));
                                        }
                                    };
                                    
                                    await processInChunks(selectedIDs);
                                    
                                    processingAlert.update({
                                        title: 'Completed!',
                                        html: `Successfully processed ${totalEmployees} employees`,
                                        icon: 'success',
                                        showConfirmButton: false,
                                        confirmButtonText: 'Exit',
                                        confirmButtonColor: 'teal',
                                    });
                                    
                                    setTimeout(() => {
                                        processingAlert.close();
                                    }, 2000);
                                } catch (error) {
                                    const failedIndex = selectedIDs.findIndex(id => id === IDnum);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Processing Error',
                                        text: `Stopped at employee ${failedIndex + 1} of ${totalEmployees}: ${error.message}`
                                    });
                                }
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Cancel",
                            onClick: function() {
                                batchPopup.hide();
                            }
                        }
                    }
                ]
            }).dxPopup("instance");


            /***************************************************************
             * 6B) GLOBALS & UTILITIES                                     *
             ***************************************************************/
            let selectedRecord = null;

            function updateRecordAndRefresh(updatedRecord) {
                const index = payRecords.findIndex(r => r.recordID === updatedRecord.recordID);
                if (index !== -1) {
                    payRecords[index] = {
                        ...payRecords[index],
                        ...updatedRecord
                    };
                    dataGrid.option("dataSource", [...payRecords]);
                    dataGrid.refresh();
                } else {
                    console.warn("Record not found during update.");
                }
            };
            /***************************************************************
             * 6C) RECALCULATE POPUP                                        *
             ***************************************************************/
            const recalculatePopup = $("#recalculatePopup").dxPopup({
                visible: false,
                title: "Recalculate Payroll",
                width: 900,
                height: 800,
                showCloseButton: false,
                animation: {
                    show: {
                        type: "pop",
                        duration: 150,
                        from: {
                            scale: 0.01
                        },
                        to: {
                            scale: 1
                        }
                    },
                    hide: {
                        type: "pop",
                        duration: 200,
                        from: {
                            scale: 1
                        },
                        to: {
                            scale: 0
                        }
                    }
                },
                position: {
                    my: "center",
                    at: "center",
                    of: window
                },
                contentTemplate: function() {
                    const $formContainer = $("<div>")
                        .addClass("form-scroll")
                        .css({
                            "max-height": "650px",
                            "overflow-y": "auto",
                            "padding-right": "10px",
                            "box-sizing": "border-box"
                        });

                    $formContainer.dxForm({
                        formData: {},
                        items: [{
                                itemType: 'group',
                                colCount: 1,
                                colSpan: 2,
                                caption: '',
                                items: [{
                                    dataField: "employeeName",
                                    width: "80%",
                                    label: {
                                        text: "Employee Name"
                                    },
                                    editorOptions: {
                                        disabled: true
                                    }
                                }, ],
                            },
                            {
                                itemType: "group",
                                colCount: 1,
                                colSpan: 2,
                                items: [{
                                    itemType: "tabbed",
                                    tabPanelOptions: {
                                        height: "auto",
                                        width: "100%",
                                        animationEnabled: true,
                                        swipeEnabled: true,
                                        deferRendering: false,
                                    },
                                    tabs: [{
                                            title: "1. General Settings",
                                            items: [{
                                                itemType: 'group',
                                                colCount: 2,
                                                colSpan: 2,
                                                caption: '',
                                                items: [{
                                                        dataField: 'template',
                                                        label: {
                                                            text: 'Payroll Template'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: payrollTemplates,
                                                            displayExpr: 'name',
                                                            valueExpr: 'name',
                                                            value: payrollTemplates.length > 0 ? payrollTemplates[0].name : null,
                                                            placeholder: "No templates available",
                                                            disabled: payrollTemplates.length === 0,
                                                            disabled: true
                                                        }
                                                    },
                                                    {
                                                        dataField: 'rundate',
                                                        dataType: 'date',
                                                        label: {
                                                            text: 'Set payroll date'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'ManualHours',
                                                        label: {
                                                            text: 'Hours Override'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'override',
                                                        label: {
                                                            text: 'Frequency Override'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: payFrequencyData,
                                                            displayExpr: 'Frequency',
                                                            valueExpr: 'Frequency',
                                                        }
                                                    },
                                                    {
                                                        dataField: 'taxType',
                                                        label: {
                                                            text: 'Tax Category'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: taxCategoryData,
                                                            displayExpr: 'taxType',
                                                            valueExpr: 'ID',
                                                        }
                                                    },
                                                    {
                                                        dataField: 'TaxProfile',
                                                        label: {
                                                            text: 'Tax Profile'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: taxConfigData,
                                                            displayExpr: 'description',
                                                            valueExpr: 'ID',
                                                        }
                                                    },
                                                    {
                                                        dataField: 'OT_Rate',
                                                        label: {
                                                            text: 'Overtime Payclass'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: payclassData,
                                                            displayExpr: 'payClass',
                                                            valueExpr: 'rate',
                                                        }
                                                    },
                                                    {
                                                        dataField: 'H_Rate',
                                                        label: {
                                                            text: 'Holiday Payclass'
                                                        },
                                                        editorType: 'dxSelectBox',
                                                        editorOptions: {
                                                            dataSource: payclassData,
                                                            displayExpr: 'payClass',
                                                            valueExpr: 'rate',
                                                        }
                                                    },
                                                    {
                                                        dataField: 'PayRateOverride',
                                                        label: {
                                                            text: 'Pay Rate Override'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'FixPayOverride',
                                                        label: {
                                                            text: 'Fix Pay Override'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        },
                                                        validationRules: [{
                                                            type: 'range',
                                                            min: 0,
                                                            message: 'Fix Pay Override cannot be negative'
                                                        }]
                                                    }
                                                ]
                                            }]
                                        },
                                        {
                                            title: "2. Time Off Options",
                                            items: [{
                                                itemType: 'group',
                                                colCount: 2,
                                                colSpan: 2,
                                                caption: '',
                                                items: [{
                                                        dataField: 'PersonalHours',
                                                        label: {
                                                            text: 'Personal Hours'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'PersonalDays',
                                                        label: {
                                                            text: 'Personal Days'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Vac',
                                                        label: {
                                                            text: 'Vacation Days'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'sickDays',
                                                        label: {
                                                            text: 'Sick Days'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Description',
                                                        label: {
                                                            text: 'Others Description'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'Other',
                                                        label: {
                                                            text: 'Other Hours'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Other2',
                                                        label: {
                                                            text: 'Other Days'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Other3',
                                                        label: {
                                                            text: 'Other Fixed Value'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                ]
                                            }]
                                        },
                                        {
                                            title: "3. Add-ons Options",
                                            items: [{
                                                itemType: 'group',
                                                colCount: 2,
                                                colSpan: 2,
                                                caption: '',
                                                items: [{
                                                        dataField: 'OT_Hours',
                                                        label: {
                                                            text: 'Overtime Hours'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'DT_Hours',
                                                        label: {
                                                            text: 'DoubleTime Hours'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'H_Hours',
                                                        label: {
                                                            text: 'Holiday Hours'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Incentive',
                                                        label: {
                                                            text: 'Incentive'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Travel',
                                                        label: {
                                                            text: 'Travel'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'Allowance',
                                                        label: {
                                                            text: 'Allowance'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                ]
                                            }]
                                        },
                                        {
                                            title: "4. Deductions",
                                            items: [{
                                                itemType: 'group',
                                                colCount: 2,
                                                colSpan: 2,
                                                caption: '',
                                                items: [{
                                                        dataField: 'variable_description1',
                                                        label: {
                                                            text: 'Variable Description 1'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction1',
                                                        label: {
                                                            text: 'Variable Amount 1'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description2',
                                                        label: {
                                                            text: 'Variable Description 2'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction2',
                                                        label: {
                                                            text: 'Variable Amount 2'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description3',
                                                        label: {
                                                            text: 'Variable Description 3'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction3',
                                                        label: {
                                                            text: 'Variable Amount 3'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description4',
                                                        label: {
                                                            text: 'Variable Description 4'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction4',
                                                        label: {
                                                            text: 'Variable Amount 4'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description5',
                                                        label: {
                                                            text: 'Variable Description 5'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction5',
                                                        label: {
                                                            text: 'Variable Amount 5'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description6',
                                                        label: {
                                                            text: 'Variable Description 6'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction6',
                                                        label: {
                                                            text: 'Variable Amount 6'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description7',
                                                        label: {
                                                            text: 'Variable Description 7'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction7',
                                                        label: {
                                                            text: 'Variable Amount 7'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    },
                                                    {
                                                        dataField: 'variable_description8',
                                                        label: {
                                                            text: 'Variable Description 8'
                                                        },
                                                    },
                                                    {
                                                        dataField: 'variable_deduction8',
                                                        label: {
                                                            text: 'Variable Amount 8'
                                                        },
                                                        editorType: 'dxNumberBox',
                                                        editorOptions: {
                                                            min: 0,
                                                            showSpinButtons: false,
                                                        }
                                                    }
                                                ]
                                            }]
                                        }
                                    ],
                                }]
                            }
                        ]
                    });

                    return $formContainer;
                },
                toolbarItems: [{
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Update",
                            type: "success",
                            onClick: async function() {
                                const form = recalculatePopup.content().find(".dx-form").dxForm("instance");
                                const formData = form.option("formData");

                                const emp = employeeList.find(e => e.IDnum === selectedRecord.IDnum);
                                if (!emp) {
                                    DevExpress.ui.notify("Employee not found", "error", 2000);
                                    return;
                                }

                                const oldIndex = payRecords.findIndex(rec => rec.recordID === selectedRecord.recordID);
                                if (oldIndex !== -1) {
                                    payRecords.splice(oldIndex, 1);
                                }

                                const newRecord = await createNewPayrollRecord(emp, formData);

                                payRecords.push(newRecord);

                                dataGrid.option("dataSource", [...payRecords]);
                                dataGrid.refresh();

                                recalculatePopup.hide();

                                DevExpress.ui.notify("Payroll record recalculated and updated.", "success", 2000);
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Cancel",
                            onClick: function() {
                                recalculatePopup.hide();
                            }
                        }
                    }
                ]
            }).dxPopup("instance");

            function openRecalculatePopup(record) {
                selectedRecord = record;
                recalculatePopup.show();
                recalculatePopup.option("onShown", function() {
                    const form = recalculatePopup.content().find(".dx-form").dxForm("instance");
                    if (form) {
                        form.option("formData", {
                            ...record
                        });
                    } else {
                        console.warn("Recalculate form not found!");
                    }
                });
            }
            /***************************************************************
             * 6B) "EDIT" POPUP
             ***************************************************************/
            const editPopup = $("#editPopup").dxPopup({
                visible: false,
                title: "Edit Payroll Record",
                width: 800,
                height: 720,
                maxHeight: 720,
                showCloseButton: true,
                resizeEnabled: true,
                contentTemplate: function() {
                    const $formContainer = $("<div>").css({
                        "max-height": "700px",
                        "overflow-y": "auto",
                        "padding-right": "10px",
                        "box-sizing": "border-box"
                    });

                    $formContainer.dxForm({
                        formData: selectedRecord, // 🎯 Loaded dynamically before show
                        items: [{
                            itemType: "group",
                            colCount: 2,
                            caption: "General Info",
                            items: [{
                                    dataField: "employeeName",
                                    label: {
                                        text: "Employee"
                                    },
                                    editorType: "dxTextBox",
                                    editorOptions: {
                                        readOnly: true
                                    }
                                },
                                {
                                    dataField: "rundate",
                                    label: {
                                        text: "Run Date"
                                    },
                                    editorType: "dxDateBox",
                                    editorOptions: {
                                        type: "date"
                                    }
                                },
                                {
                                    dataField: "PayRateOverride",
                                    label: {
                                        text: "Pay Rate Override"
                                    },
                                    editorType: "dxNumberBox"
                                },
                                {
                                    dataField: "FixPayOverride",
                                    label: {
                                        text: "Fix Pay Override"
                                    },
                                    editorType: "dxNumberBox"
                                },
                                {
                                    dataField: "OT_Hours",
                                    label: {
                                        text: "OT Hours"
                                    },
                                    editorType: "dxNumberBox"
                                },
                                {
                                    dataField: "Travel",
                                    label: {
                                        text: "Travel Allowance"
                                    },
                                    editorType: "dxNumberBox"
                                },
                                {
                                    dataField: "variable_description1",
                                    label: {
                                        text: "Deduction Label"
                                    }
                                },
                                {
                                    dataField: "variable_deduction1",
                                    label: {
                                        text: "Deduction Amount"
                                    },
                                    editorType: "dxNumberBox"
                                }
                                // Add more fields as needed
                            ]
                        }],
                        showColonAfterLabel: false,
                        minColWidth: 200
                    });

                    return $formContainer;
                },
                toolbarItems: [{
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "before",
                        options: {
                            text: "Save Changes",
                            type: "success",
                            onClick: function() {
                                const form = editPopup.content().find(".dx-form").dxForm("instance");
                                const formData = form.option("formData");
                                if (!formData || !formData.recordID) {
                                    DevExpress.ui.notify("Missing record ID", "error", 2000);
                                    return;
                                }
                                updateRecordAndRefresh(formData);
                                editPopup.hide();
                                DevExpress.ui.notify("Record updated", "success", 1500);
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Cancel",
                            onClick: function() {
                                editPopup.hide();
                            }
                        }
                    }
                ]
            }).dxPopup("instance");

            function openEditPopup(recordID) {
                selectedRecord = payRecords.find(r => r.recordID === recordID);
                if (!selectedRecord) {
                    DevExpress.ui.notify("Record not found", "error", 2000);
                    return;
                }

                editPopup.show();
                editPopup.option("onShown", function() {
                    const form = editPopup.content().find(".dx-form").dxForm("instance");
                    if (form) {
                        form.option("formData", {
                            ...selectedRecord
                        });
                    } else {
                        console.warn("Edit form not found!");
                    }
                });
            }

            /***************************************************************
             * Deductions Popup (forces black font color from inside)
             ***************************************************************/
            const deductionsPopup = $("#deductionsPopup").dxPopup({
                visible: false,
                title: "Deductions Management",
                width: 1000,
                height: 600,
                showCloseButton: false,
                dragEnabled: true,
                resizeEnabled: true,
                onShowing: function() {
                    if (typeof deductionsList !== "undefined" && deductionsList) {
                        deductionsList.option("dataSource", deductionsData);
                        deductionsList.refresh();
                    }
                },
                contentTemplate: function() {
                    // root container - set color here so child widgets inherit by default
                    const $container = $("<div>").css({
                        display: "flex",
                        height: "100%",
                        padding: "10px",
                        color: "#000" // <-- force black as base
                    });

                    // Create Deduction Aside
                    const $createDeduction = $("<div>").css({
                        flex: "1",
                        padding: "15px",
                        borderRight: "1px solid #ddd",
                        backgroundColor: "#ffffff"
                    });
                    $createDeduction.append("<h3 style='color:#000'>Create Deduction</h3>");

                    // createForm with onContentReady to ensure internal labels/values are black
                    const createForm = $("<div>").dxForm({
                        formData: {
                            description: "",
                            amount: 0,
                            type: "fixed"
                        },
                        onContentReady: function(e) {
                            // enforce black in form after it's rendered
                            $(e.element).css("color", "#000");
                            $(e.element).find(".dx-field-label, .dx-field-value, .dx-texteditor-input").css("color", "#000");
                        },
                        items: [{
                                dataField: "description",
                                label: {
                                    text: "Description"
                                },
                                editorOptions: {
                                    placeholder: "Enter deduction description",
                                    inputAttr: {
                                        style: "color: #000"
                                    }
                                },
                                validationRules: [{
                                    type: "required"
                                }]
                            },
                            {
                                dataField: "amount",
                                label: {
                                    text: "Amount"
                                },
                                editorType: "dxNumberBox",
                                editorOptions: {
                                    format: "currency",
                                    showSpinButtons: true,
                                    min: 0,
                                    inputAttr: {
                                        style: "color: #000"
                                    }
                                },
                                validationRules: [{
                                    type: "required"
                                }]
                            },
                            {
                                dataField: "type",
                                label: {
                                    text: "Type"
                                },
                                editorType: "dxSelectBox",
                                editorOptions: {
                                    items: ["fixed", "percentage"],
                                    value: "fixed",
                                    inputAttr: {
                                        style: "color: #000"
                                    }
                                }
                            }
                        ],
                        showColonAfterLabel: true
                    });
                    $createDeduction.append(createForm);

                    const $createButton = $("<div>").dxButton({
                        text: "Create Deduction",
                        type: "success",
                        onClick: function() {
                            const formInstance = createForm.dxForm("instance");
                            const formData = formInstance.option("formData");
                            if (formInstance.validate().isValid) {
                                const newDeduction = {
                                    id: deductionsData.length > 0 ? Math.max(...deductionsData.map(d => d.id)) + 1 : 1,
                                    description: formData.description,
                                    amount: formData.amount,
                                    type: formData.type
                                };
                                deductionsData.push(newDeduction);
                                DevExpress.ui.notify(`Deduction "${formData.description}" created successfully`, "success", 3000);
                                formInstance.resetValues();
                                if (typeof deductionsList !== "undefined" && deductionsList) {
                                    deductionsList.option("dataSource", deductionsData);
                                    deductionsList.refresh();
                                }
                                // Save to server
                                saveDeductionsToServer();
                            }
                        }
                    });
                    $createDeduction.append($createButton);

                    // Deductions List Aside
                    const $deductionsList = $("<div>").css({
                        flex: "2",
                        padding: "5px"
                    });

                    // ensure keyExpr is set for proper row identity
                    window.deductionsList = $("<div>").dxDataGrid({
                        dataSource: deductionsData,
                        keyExpr: "id",
                        onContentReady: function(e) {
                            // enforce black text on grid's root and its rows/headers/cells
                            const gridElement = $(e.element);
                            gridElement.css("color", "#000");

                            // Target all grid text elements specifically
                            gridElement.find(".dx-row, .dx-data-row, .dx-header-row, .dx-datagrid-headers, .dx-datagrid-content").css("color", "#000");

                            // Specifically target cell content
                            gridElement.find(".dx-datagrid-text-content").css("color", "#000");

                            // Target input elements within the grid
                            gridElement.find(".dx-texteditor-input").css("color", "#000");

                            // Ensure links and buttons are black too
                            gridElement.find(".dx-link, .dx-button-text").css("color", "#000");

                            // Ensure pager elements are black
                            gridElement.find(".dx-pager, .dx-pages, .dx-page, .dx-navigate-button").css("color", "#000");
                        },
                        columns: [{
                                dataField: "description",
                                caption: "Description",
                                cssClass: "black-text"
                            },
                            {
                                dataField: "amount",
                                caption: "Amount",
                                format: {
                                    type: "currency",
                                    currency: "USD",
                                    precision: 2
                                },
                                cssClass: "black-text"
                            },
                            {
                                dataField: "type",
                                caption: "Type",
                                width: 100,
                                cssClass: "black-text"
                            },
                            {
                                caption: "Actions",
                                type: "buttons",
                                width: 120,
                                buttons: [{
                                        icon: "edit",
                                        hint: "Edit",
                                        onClick: function(e) {
                                            editDeduction(e.row.data);
                                        }
                                    },
                                    {
                                        icon: "trash",
                                        hint: "Delete",
                                        onClick: function(e) {
                                            DevExpress.ui.dialog.confirm("Delete this deduction?", "Confirm Delete").done(function(result) {
                                                if (result) {
                                                    deductionsData = deductionsData.filter(d => d.id !== e.row.data.id);
                                                    DevExpress.ui.notify("Deduction removed", "info", 2000);
                                                    window.deductionsList.option("dataSource", deductionsData);
                                                    window.deductionsList.refresh();
                                                    // Save to server
                                                    saveDeductionsToServer();
                                                }
                                            });
                                        }
                                    }
                                ]
                            }
                        ],
                        // Enhanced paging configuration
                        paging: {
                            enabled: true,
                            pageSize: 10
                        },
                        // Explicit pager configuration
                        pager: {
                            visible: true,
                            showPageSizeSelector: true,
                            allowedPageSizes: [5, 10, 20, 50],
                            showInfo: true,
                            showNavigationButtons: true
                        },
                        height: 450,
                        // Add CSS class to the grid for additional styling
                        elementAttr: {
                            class: "deductions-grid"
                        }
                    }).dxDataGrid("instance");

                    $deductionsList.append(window.deductionsList.element());
                    $container.append($createDeduction);
                    $container.append($deductionsList);

                    // Add a style element to ensure black text for grid cells and pager
                    const $style = $("<style>")
                        .text(`
                            .deductions-grid .dx-datagrid-text-content,
                            .deductions-grid .dx-row > td,
                            .deductions-grid .dx-header-row > td,
                            .deductions-grid .dx-data-row > td,
                            .deductions-grid .dx-command-edit .dx-link,
                            .black-text {
                                color: #000 !important;
                            }
                            .deductions-grid .dx-texteditor-input {
                                color: #000 !important;
                            }
                            .deductions-grid .dx-pager,
                            .deductions-grid .dx-pages,
                            .deductions-grid .dx-page,
                            .deductions-grid .dx-navigate-button,
                            .deductions-grid .dx-page-sizes,
                            .deductions-grid .dx-page-size {
                                color: #000 !important;
                            }
                            .deductions-grid .dx-pager .dx-info {
                                color: #000 !important;
                            }
                        `);
                    $container.append($style);

                    // Function to save deductions to server
                    function saveDeductionsToServer() {
                        $.ajax({
                            url: 'save_deduction.php',
                            type: 'POST',
                            data: {
                                deductions: JSON.stringify(deductionsData)
                            },
                            success: function(response) {
                                DevExpress.ui.notify('Deductions saved successfully', 'success', 3000);
                            },
                            error: function(xhr, status, error) {
                                DevExpress.ui.notify('Error saving deductions: ' + error, 'error', 5000);
                            }
                        });
                    }

                    return $container;
                },
                toolbarItems: [{
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "before",
                        options: {
                            text: "Save All",
                            type: "default",
                            icon: "save",
                            onClick: function() {
                                // Access the saveDeductionsToServer function from the popup's content
                                const popupContent = deductionsPopup.content();
                                if (popupContent && typeof popupContent.saveDeductionsToServer === 'function') {
                                    popupContent.saveDeductionsToServer();
                                } else {
                                    // Fallback if function isn't accessible
                                    $.ajax({
                                        url: '../database/save_deduction.php',
                                        type: 'POST',
                                        data: {
                                            deductions: JSON.stringify(deductionsData)
                                        },
                                        success: function(response) {
                                            DevExpress.ui.notify('Deductions saved successfully', 'success', 3000);
                                        },
                                        error: function(xhr, status, error) {
                                            DevExpress.ui.notify('Error saving deductions: ' + error, 'error', 5000);
                                        }
                                    });
                                }
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: "bottom",
                        location: "after",
                        options: {
                            text: "Close",
                            onClick: function() {
                                deductionsPopup.hide();
                            }
                        }
                    }
                ]
            }).dxPopup("instance");

            /***************************************************************
             * 7) DATAGRID                                                 *
             ***************************************************************/
            dataGrid = $("#gridContainer").dxDataGrid({
                dataSource: payRecords,
                height: '100%',
                width: '100%',
                showBorders: true,
                paging: {
                    pageSize: 21,
                },
                pager: {
                    visible: true,
                    showPageSizeSelector: false,
                    showInfo: true,
                    showNavigationButtons: true,
                },
                selection: {
                    mode: 'multiple',
                    deferred: false,
                    showCheckBoxesMode: 'onClick',
                    selectAllMode: 'allPages',
                    allowSelectAll: false,
                },
                searchPanel: {
                    visible: true,
                    highlightCaseSensitive: true,
                    width: 200,
                    placeholder: 'Quick search...',
                    searchVisibleColumnsOnly: true,
                    highlightSearchText: true,
                    text: '',
                    searchExpr: null,
                    searchMode: 'contains',
                },
                headerFilter: {
                    visible: true
                },
                filterRow: {
                    visible: false,
                    applyFilter: "auto"
                },
                selection: {
                    mode: "multiple",
                    showCheckBoxesMode: "always"
                },
                sorting: {
                    mode: "multiple"
                },
                columnAutoWidth: true,
                rowAlternationEnabled: false,
                adaptColumnWidthByRatio: true,
                allowColumnReordering: false,
                columnAutoWidth: true,
                showRowLines: true,
                allowColumnResizing: true,
                columnHidingEnabled: true,
                editing: {
                    mode: "popup",
                    allowAdding: false,
                    allowUpdating: false,
                    allowDeleting: true,
                },
                columns: [
                    {
                        dataField: 'override',
                        caption: 'Frequency Override',
                        visible: false,
                        calculateCellValue: function(rowData) {
                            return (typeof rowData.override === 'string' && rowData.override.trim() !== "") ?
                                rowData.override :
                                rowData.Frequency;
                        }
                    },
                    {
                        dataField: 'taxType',
                        caption: 'Tax Category',
                        visible: false,
                    },

                    {
                        dataField: "recordID",
                        caption: "Index",
                        width: 90,
                        alignment: 'left',
                        visible: true,
                    },
                    {
                        dataField: "IDnum",
                        caption: "User Id",
                        width: 100,
                        alignment: 'left',
                        filterValue: undefined,
                        filterType: "include"
                    },
                    {
                        dataField: "FirstName",
                        caption: "First Name",
                        alignment: 'left',
                        width: 120
                    },
                    {
                        dataField: "MI",
                        caption: "MI",
                        alignment: 'left',
                        visible: false,
                        width: 80
                    },
                    {
                        dataField: "LastName",
                        caption: "Last Name",
                        alignment: 'left',
                        width: 120
                    },
                    {
                        dataField: "employeeName",
                        caption: "Full Name",
                        alignment: 'left',
                        width: 150,
                        visible: false
                    },

                    {
                        dataField: 'TRN',
                        caption: 'TRN',
                        alignment: 'left',
                        visible: false,
                        width: 100
                    },
                    {
                        dataField: 'NIS',
                        caption: 'NIS',
                        alignment: 'left',
                        visible: false,
                        width: 100
                    },

                    {
                        dataField: 'rundate',
                        caption: 'Pay Date',
                        dataType: 'date',
                        format: 'MMM dd, yyyy',
                        calculateDisplayValue: (data) => {
                            try {
                                const date = data.rundate || null;
                                return (date && !isNaN(new Date(date).getTime())) ?
                                    formatDateDisplay(new Date(date)) :
                                    'No Date';
                            } catch {
                                return 'Invalid Date';
                            }
                        }
                    },

                    {
                        dataField: "HireDate",
                        caption: "Hired On",
                        alignment: "left",
                        visible: false,
                        width: 120,
                        dataType: "date",
                        format: "MM/dd/yyyy",
                        calculateCellValue: function(rowData) {
                            const employee = employeeList.find(e => e.IDnum === rowData.IDnum);
                            if (!employee || !employee.HireDate) {
                                return null;
                            }
                            return new Date(employee.HireDate);
                        }
                    },

                    {
                        dataField: "Frequency",
                        caption: "Frequency",
                        alignment: 'left',
                        width: 120,
                        calculateCellValue: function(rowData) {
                            return (typeof rowData.override === 'string' && rowData.override.trim() !== "") ? rowData.override : rowData.Frequency;
                        }
                    },

                    {
                        dataField: 'payPeriod',
                        caption: 'Period',
                        customizeText: (cellInfo) => {
                            return cellInfo.value?.toString() || 'N/A';
                        }
                    },
                    {
                        dataField: 'ytdTracker',
                        caption: 'YTD Period',
                        customizeText: (cellInfo) => {
                            return cellInfo.value?.toString() || 'N/A';
                        }
                    },

                    {
                        dataField: 'periodMax',
                        caption: 'Period Max',
                        dataType: 'number',
                        alignment: 'left',
                        width: 120,
                        calculateCellValue: function(record) {
                            const frequency = validateFrequency(record.override || record.Frequency);
                            return getPeriodMax(frequency); // this will dynamically compute periodMax
                        }
                    },


                    {
                        dataField: "PayRate",
                        caption: "Pay Rate",
                        alignment: "left",
                        //visible: false,
                        format: {
                            style: "currency",
                            currency: "USD"
                        },
                        width: 120,
                        calculateCellValue: function(rowData) {
                            return getPayRate(rowData, payRecords, employeeList);
                        }
                    },
                    {
                        dataField: 'PayRateOverride',
                        caption: 'Rate Override',
                        dataType: 'number',
                        alignment: 'left',
                        //visible: false,
                        width: 120,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        allowEditing: true // Ensure it's editable
                    },
                    {
                        dataField: "hours",
                        caption: "ManualHours",
                        calculateCellValue: function(rowData) {
                            const effectiveFrequency = rowData.override || rowData.Frequency;
                            return rowData.ManualHours > 0 ? rowData.ManualHours : frequencyPresets[effectiveFrequency]?.hours || 0;
                        }
                    },
                    {
                        dataField: 'ManualHours',
                        caption: 'Regular',
                        dataType: 'left',
                        alignment: 'left',
                        ///visible: false,
                        width: 140
                    },

                    {
                        dataField: 'sickDays',
                        caption: 'Sick',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        width: 120
                    },

                    {
                        dataField: "calculatedSick",
                        caption: "Sick Pay",
                        dataType: "number",
                        alignment: 'left',
                        //visible: false,
                        width: 130,
                        format: {
                            style: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        width: 120,
                        calculateCellValue: function(rowData) {
                            return getSickPay(rowData, payRecords, employeeList);
                        }
                    },

                    {
                        dataField: 'Vac',
                        caption: 'Vac',
                        dataType: 'number',
                        alignment: 'left',
                        width: 150,
                        visible: false,
                    },
                    {
                        dataField: 'calculatedVacation',
                        caption: 'Vacation Pay',
                        //visible: false,
                        alignment: 'left',
                        width: 130,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedVacation;
                        }
                    },

                    {
                        dataField: 'Description',
                        caption: 'Others Description',
                        dataType: 'text',
                        alignment: 'left',
                        visible: false,
                        width: 200
                    },
                    {
                        dataField: 'Other',
                        caption: 'OtherHours',
                        dataType: 'number',
                        visible: false,
                        alignment: 'left',
                        width: 120

                    },
                    {
                        dataField: 'Other2',
                        caption: 'Other Days Value',
                        dataType: 'number',
                        visible: false,
                        alignment: 'left',
                        width: 150

                    },
                    {
                        dataField: 'Other3',
                        caption: 'Other Fixed Value',
                        dataType: 'number',
                        visible: false,
                        alignment: 'left',
                        width: 150
                    },
                    {
                        dataField: 'calculatedOther',
                        caption: 'Other Payout',
                        //dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        width: 100,
                        format: {
                            type: "currency",
                            currency: "USD"
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedOther;
                        }
                    },

                    {
                        dataField: 'PersonalHours',
                        caption: 'Personal',
                        dataType: 'number',
                        visible: false
                    },
                    {
                        dataField: 'PersonalDays',
                        caption: 'Personal Days',
                        dataType: 'number',
                        visible: false
                    },
                    {
                        dataField: 'calculatedPersonal',
                        caption: 'Personal Payout',
                        //dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        width: 100,
                        format: {
                            type: "currency",
                            currency: "USD"
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedPersonal;
                        }
                    },

                    {
                        dataField: 'Travel',
                        caption: 'Travel',
                        dataType: 'number',
                        alignment: 'left',
                        visible: true,
                        width: 180,
                        format: {
                            type: 'currency',
                            precision: 2,
                            currency: 'USD'
                        }
                    },
                    {
                        dataField: 'Incentive',
                        caption: 'Incentive',
                        dataType: 'number',
                        alignment: 'left',
                        width: 180,
                        visible: true,
                        format: {
                            type: 'currency',
                            precision: 2,
                            currency: 'USD'
                        }
                    },
                    {
                        dataField: 'Allowance',
                        caption: 'Allowance',
                        dataType: 'number',
                        alignment: 'left',
                        visible: true,
                        width: 180,
                        format: {
                            type: 'currency',
                            precision: 2,
                            currency: 'USD'
                        }
                    },


                    {
                        dataField: 'OT_Rate',
                        caption: 'OT_Rate',
                        dataType: 'number',
                        alignment: 'center',
                        visible: false,
                    },
                    {
                        dataField: 'OT_Hours',
                        caption: 'O/T',
                        dataType: 'number',
                        alignment: 'center',
                        visible: false,
                    },
                    {
                        dataField: 'calculatedOverTime',
                        caption: 'Overtime Pay',
                        // dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        width: 110,
                        format: {
                            type: "currency",
                            currency: "USD"
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedOverTime;
                        }
                    },

                    {
                        dataField: 'DT_Rate',
                        caption: 'DT_Rate',
                        dataType: 'number',
                        alignment: 'center',
                        visible: false,
                    },
                    {
                        dataField: 'DT_Hours',
                        caption: 'D/T',
                        dataType: 'number',
                        alignment: 'left',
                        width: 120,
                        visible: false
                    },
                    {
                        dataField: 'calculatedDt',
                        caption: 'Double Time Pay',
                        //dataType: 'number',
                        visible: false,
                        alignment: 'left',
                        width: 100,
                        format: {
                            type: "currency",
                            currency: "USD"
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedDt;
                        }
                    },

                    {
                        dataField: 'H_Rate',
                        caption: 'H_Rate',
                        dataType: 'number',
                        alignment: 'center',
                        visible: false,
                    },
                    {
                        dataField: 'H_Hours',
                        caption: 'Holiday',
                        dataType: 'number',
                        visible: false,
                    },
                    {
                        dataField: 'calculatedHoliday',
                        caption: 'Holiday Pay',
                        //dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        format: {
                            type: "currency",
                            currency: "USD"
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedHoliday;
                        }
                    },

                    {
                        dataField: 'calculatedHeart',
                        caption: 'Heart',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                    },

                    {
                        dataField: 'taxTypeNHT',
                        caption: 'Employee NHT %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            var selectedId = data.taxTypeNHT;
                            var selectedItem = taxCategoryData.find(item => item.ID === 1);
                            return selectedItem ? selectedItem.NHT + '%' : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedNHT',
                        caption: 'Total NHT',
                        dataType: 'number',
                        alignment: 'left',
                        width: 130,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },
                    {
                        dataField: 'ytdNHT',
                        caption: 'YTD NHT',
                        dataType: 'number',
                        alignment: 'left',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        calculateCellValue: function(data) {
                            return data.ytdNHT;
                        }
                    },

                    {
                        dataField: 'taxTypeNHT2',
                        caption: 'Employer NHT %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            var selectedId = data.taxTypeNHT2;
                            var selectedItem = taxCategoryData.find(item => item.ID === 2);
                            return selectedItem ? selectedItem.NHT + '%' : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedNHT2',
                        caption: 'Total Employer NHT',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },

                    {
                        dataField: 'taxTypeNIS',
                        caption: 'Employee NIS %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            var selectedId = data.taxTypeNIS;
                            var selectedItem = taxCategoryData.find(item => item.ID === 1);
                            return selectedItem ? selectedItem.NIS + '%' : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedNIS',
                        caption: 'Total NIS',
                        dataType: 'number',
                        alignment: 'left',
                        width: 130,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },
                    {
                        dataField: 'ytdNIS',
                        caption: 'YTD NIS',
                        dataType: 'number',
                        alignment: 'left',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        calculateCellValue: function(data) {
                            return data.ytdNIS;
                        }
                    },

                    {
                        dataField: 'taxTypeNIS2',
                        caption: 'Employer NIS %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            var selectedId = data.taxTypeNIS2;
                            var selectedItem = taxCategoryData.find(item => item.ID === 2);
                            return selectedItem ? selectedItem.NIS + '%' : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedNIS2',
                        caption: 'Total Employer NIS',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },

                    {
                        dataField: 'taxTypeEdTax',
                        caption: 'Employee EdTax %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            const selectedItem = taxCategoryData.find(item => item.ID === 1);
                            return selectedItem ? `${selectedItem.ETAX}%` : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedEdTax',
                        caption: 'Total EdTax',
                        dataType: 'number',
                        //visible: false,
                        width: 130,
                        alignment: 'left',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },
                    {
                        dataField: 'ytdEDTAX',
                        caption: 'YTD EDTAX',
                        dataType: 'number',
                        alignment: 'left',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        visible: true,
                        calculateCellValue: function(data) {
                            return data.ytdEDTAX;
                        }
                    },


                    {
                        dataField: 'taxTypeEdTax2',
                        caption: 'Employer EdTax %',
                        editorType: 'dxTextBox',
                        alignment: 'center',
                        visible: false,
                        calculateCellValue: function(data) {
                            const selectedItem = taxCategoryData.find(item => item.ID === 2);
                            return selectedItem ? `${selectedItem.ETAX}%` : '0%';
                        }
                    },
                    {
                        dataField: 'calculatedEdTax2',
                        caption: 'Total Employer EdTax',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },

                    {
                        dataField: 'TaxProfile',
                        caption: 'TaxProfile',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                    },

                    {
                        dataField: 'calculatedPAYE',
                        caption: 'Total PAYE',
                        dataType: 'number',
                        alignment: 'right',
                        width: 130,
                        //visible: false,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                    },

                    {
                        dataField: 'ytdPAYE',
                        caption: 'YTD PAYE',
                        dataType: 'number',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        visible: true,
                        calculateCellValue: function(data) {
                            return data.ytdPAYE;
                        }
                    },

                    {
                        dataField: 'variable_description1',
                        caption: 'Variable Description',
                        dataType: 'text',
                        visible: false,
                    },
                    {
                        dataField: 'variable_deduction1',
                        caption: 'Variable Deductions',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        //width: 100,
                    },
                    {
                        dataField: 'variable_description2',
                        caption: 'Variable Description',
                        dataType: 'text',
                        visible: false,
                    },
                    {
                        dataField: 'variable_deduction2',
                        caption: 'Variable Deductions',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        //width: 100,
                    },
                    {
                        dataField: 'variable_description3',
                        caption: 'Variable Description',
                        dataType: 'text',
                        visible: false,
                    },
                    {
                        dataField: 'variable_deduction3',
                        caption: 'Variable Deductions',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        //width: 100,
                    },
                    {
                        dataField: 'variable_description4',
                        caption: 'Variable Description',
                        dataType: 'text',
                        visible: false,
                    },
                    {
                        dataField: 'variable_deduction4',
                        caption: 'Variable Deductions',
                        dataType: 'number',
                        alignment: 'left',
                        visible: false,
                        //width: 100,
                    },

                    {
                        dataField: 'calculatedRegular',
                        caption: 'Regular Pay',
                        dataType: 'number',
                        alignment: 'left',
                        width: 130,
                        // visible: false,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(
                                emp,
                                rowData,
                                taxConfigData,
                                payclassData
                            ).calculatedRegular;
                        }
                    },

                    {
                        dataField: 'calculatedGrossPay',
                        caption: 'Gross Pay',
                        dataType: 'number',
                        alignment: 'left',
                        width: 130,
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        },
                        calculateCellValue: function(rowData) {
                            const emp = employeeList.find(e => e.IDnum === rowData.IDnum);
                            return calculatePayroll(emp, rowData, taxConfigData, payclassData).calculatedGrossPay;
                        }
                    },

                    {
                        dataField: 'calculatedTaxs',
                        caption: 'Total Taxs',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        }
                    },

                    {
                        dataField: 'calculatedDeductions',
                        caption: 'Total Deductions',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        }
                    },

                    {
                        dataField: 'calculatedNetPay',
                        caption: 'Net Pay',
                        format: {
                            type: "currency",
                            currency: "USD",
                            precision: 2
                        }
                    },

                    {
                        dataField: 'FixPayOverride',
                        caption: 'Fix Pay',
                        dataType: 'number',
                        alignment: 'left',
                        width: 200,
                        allowFiltering: true,
                        allowSorting: false,
                        visible: true
                    },

                    {
                        dataField: 'payslipID',
                        caption: 'Payroll ID',
                        dataType: "string",
                        alignment: 'left',
                        width: 200,
                        allowFiltering: true,
                        allowSorting: false, // Optional: Prevent weird truncation in some cases
                        visible: true
                    },

                    {
                        caption: "Actions",
                        type: "buttons",
                        width: 120, // Optional: give it a little more space
                        buttons: [{
                                hint: "Recalculate",
                                icon: "edit",
                                onClick: function(e) {
                                    openRecalculatePopup(e.row.data);
                                }
                            },
                            "edit",
                            "delete",
                        ]
                    }

                ],
                onInitNewRow: function(e) {
                    e.data.rundate = new Date();
                    e.data.Frequency = "Monthly";
                    e.data.PayRate = 0;
                    e.data.hours = 0;
                },
                onRowInserting: function(e) {
                    e.data.recordID = getNewRecordID();
                    payRecords.push(e.data);
                    $.ajax({
                        url: "../database/savePayroll2.php",
                        method: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(payRecords),
                    });
                },
                onRowUpdating: function(e) {
                    const idx = payRecords.findIndex(rec => rec.recordID === e.key);
                    if (idx >= 0) {
                        // Update the record with the new data
                        payRecords[idx] = {
                            ...payRecords[idx],
                            ...e.newData,
                            calculatedRegular: calculateRegularPay(e.newData) // Recalculate regular pay
                        };
                    }

                    // Send an AJAX request to update the backend
                    $.ajax({
                        url: "../database/savePayroll2.php",
                        method: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(payRecords),
                        success: function() {
                            DevExpress.ui.notify("Record updated successfully.", "success", 2000);
                        },
                        error: function() {
                            DevExpress.ui.notify("Failed to update record.", "error", 2000);
                        }
                    });

                    // Refresh the grid to reflect the changes
                    dataGrid.option("dataSource", payRecords);
                    dataGrid.refresh();
                },
                onRowRemoving: function(e) {
                    payRecords = payRecords.filter(rec => rec.recordID !== e.key);

                    // Refresh the DataGrid to reflect the changes
                    dataGrid.option("dataSource", payRecords);
                    dataGrid.refresh();

                    // Send an AJAX request to update the backend
                    $.ajax({
                        url: "../database/savePayroll2.php",
                        method: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(payRecords),
                        success: function() {
                            DevExpress.ui.notify("Record deleted successfully.", "success", 2000);
                        },
                        error: function() {
                            DevExpress.ui.notify("Failed to delete record permanently.", "error", 2000);
                        }
                    });

                    // If no records are left, show a message
                    if (payRecords.length === 0) {
                        dataGrid.option("dataSource", []); // Clear the DataGrid
                        DevExpress.ui.notify("No records found.", "info", 2500);
                    }
                },
                /***************************************************************
                 * 5) CUSTOM TOOLBAR BUTTONS                                   *
                 ***************************************************************/
                onToolbarPreparing: function(e) {
                    const dataGrid = e.component;
                    const toolbarItems = e.toolbarOptions.items;

                    // Add Date Range Selector to Toolbar
                    toolbarItems.unshift({
                        location: 'after',
                        widget: 'dxDateBox',
                        options: {
                            elementAttr: { class: 'date-range-selector' },
                            type: 'date',
                            value: new Date(), // Default to today
                            placeholder: 'End Date',
                            width: 150,
                            onValueChanged: function(e) {
                                const startDate = $("#startDatePicker").dxDateBox("instance").option("value");
                                filterByDateRange(startDate, e.value);
                            }
                        }
                    });

                    toolbarItems.unshift({
                        location: 'after',
                        widget: 'dxDateBox',
                        options: {
                            elementAttr: { class: 'date-range-selector' },
                            type: 'date',
                            value: new Date(new Date().setMonth(new Date().getMonth() - 1)), // Default to 1 month ago
                            placeholder: 'Start Date',
                            width: 150,
                            onValueChanged: function(e) {
                                const endDate = $("#endDatePicker").dxDateBox("instance").option("value");
                                filterByDateRange(e.value, endDate);
                            }
                        }
                    });

              
                  // Add CSS overrides for all toolbar elements
$("<style>")
    .text(`
        /* Generic toolbar item reset */
        .dx-toolbar .dx-widget,
        .dx-toolbar .dx-button,
        .dx-toolbar .dx-texteditor,
        .dx-toolbar .dx-placeholder {
            margin: 0 !important;
            padding: 0 !important;
            color: #000 !important;
        }

        .date-range-selector .dx-texteditor-input {
            background: rgba(255, 255, 255, 0.1) !important;
            color: white !important;
        }
        .date-range-selector .dx-placeholder {
            color: rgba(255,  255, 255, 0.7) !important;
        }



        /* Buttons (Save, Delete, Export, Generate, etc.) */
        .tax-button-class,
        .dx-toolbar .dx-button .dx-button-content {
            margin: 0 !important;
            padding: 10px !important;
            color: #fff !important;
        }
    `)
    .appendTo("head");

                    // Add IDs to the date pickers for easier access
                    setTimeout(() => {
                        $(".date-range-selector").first().attr("id", "startDatePicker");
                        $(".date-range-selector").last().attr("id", "endDatePicker");
                    }, 100);
                    // Function to filter by date range
                    function filterByDateRange(startDate, endDate) {
                        if (!startDate || !endDate) return;
                        
                        // Convert to comparable format
                        const start = new Date(startDate);
                        const end = new Date(endDate);
                        end.setHours(23, 59, 59, 999); // Include the entire end date
                        
                        // Filter the records
                        const filteredRecords = payRecords.filter(record => {
                            if (!record.rundate) return false;
                            const recordDate = new Date(record.rundate);
                            return recordDate >= start && recordDate <= end;
                        });
                        
                        // Update the grid
                        dataGrid.option("dataSource", filteredRecords);
                        dataGrid.refresh();
                        
                        // Show notification
                        DevExpress.ui.notify(`Showing records from ${start.toLocaleDateString()} to ${end.toLocaleDateString()}`, "info", 2000);
                    }
                                        

                    /************************************************
                     * Deductions Button
                     ************************************************/
                    toolbarItems.unshift({
                        location: 'before',
                        widget: 'dxButton',
                        options: {
                            icon: 'money',
                            text: 'Deductions',
                            onClick: function() {
                                deductionsPopup.show();
                            }
                        }
                    });

                    /************************************************
                     * 1) Export Button
                     ************************************************/
                    toolbarItems.unshift({
                        location: 'before',
                        widget: 'dxButton',
                        options: {
                            icon: 'download',
                            text: 'Export',
                            onClick: function() {
                                const workbook = new ExcelJS.Workbook();
                                const worksheet = workbook.addWorksheet('Payroll Data');

                                DevExpress.excelExporter.exportDataGrid({
                                    component: dataGrid,
                                    worksheet,
                                    autoFilterEnabled: true,
                                    customizeCell: (options) => {
                                        const {
                                            gridCell,
                                            excelCell
                                        } = options;
                                        if (gridCell.rowType === "header") {
                                            excelCell.font = {
                                                bold: true
                                            };
                                            excelCell.fill = {
                                                type: 'pattern',
                                                pattern: 'solid',
                                                fgColor: {
                                                    argb: 'FFD3D3D3'
                                                }
                                            };
                                        }
                                        if (gridCell.column.dataType === 'date') {
                                            excelCell.numFmt = 'mm/dd/yyyy';
                                        }
                                    }
                                }).then(() => {
                                    workbook.xlsx.writeBuffer().then((buffer) => {
                                        saveAs(new Blob([buffer], {
                                                type: 'application/octet-stream'
                                            }),
                                            `Payroll_Export_${new Date().toISOString().slice(0,10)}.xlsx`);
                                    });
                                });
                            }
                        }
                    });


                    /************************************************
                     * 4) Delete Button
                     ************************************************/
                    toolbarItems.unshift({
                        location: 'before',
                        widget: 'dxButton',
                        options: {
                            icon: 'trash',
                            text: 'Delete',
                            elementAttr: {
                                class: 'tax-button-class',
                            },
                            onClick: function() {
                                // Get selected rows
                                const selectedRowsData = dataGrid.getSelectedRowsData();

                                if (selectedRowsData.length === 0) {
                                    // Show a toast notification if no rows are selected
                                    DevExpress.ui.notify({
                                        message: "Please select rows to delete.",
                                        type: "warning",
                                        displayTime: 2000,
                                        closeOnClick: true,
                                        closeOnOutsideClick: true
                                    });
                                    return;
                                }

                                // Confirm deletion with a dialog
                                DevExpress.ui.dialog.confirm("Are you sure you want to delete the selected rows?", "Confirm Deletion").then(function(dialogResult) {
                                    if (dialogResult) {
                                        // Remove selected rows from the data source
                                        selectedRowsData.forEach(row => {
                                            payRecords = payRecords.filter(rec => rec.recordID !== row.recordID);
                                        });

                                        // Refresh the DataGrid
                                        dataGrid.option("dataSource", payRecords); // Update the DataGrid's data source
                                        dataGrid.refresh(); // Refresh the grid

                                        // Optionally, send an AJAX request to update the backend
                                        $.ajax({
                                            url: "../database/savePayroll2.php",
                                            method: "POST",
                                            contentType: "application/json",
                                            data: JSON.stringify(payRecords),
                                            success: function() {
                                                DevExpress.ui.notify("Record deleted successfully.", "success", 2000);
                                            },
                                            error: function() {
                                                DevExpress.ui.notify("I cannot delete record permanetly at this time.", "error", 2500);
                                            }
                                        });
                                    }
                                });
                            },
                            hint: 'Delete selected rows',
                        }
                    });

                    /************************************************
                     * 5) Save Button
                     ************************************************/
                    toolbarItems.unshift({
                        location: 'before',
                        widget: 'dxButton',
                        options: {
                            icon: 'save',
                            text: 'Save',
                            elementAttr: {
                                class: 'tax-button-class'
                            },
                            onClick: function() {
                                const newRecords = dataGrid.getDataSource().store()._array || dataGrid.getDataSource().items();
                                if (!newRecords || !Array.isArray(newRecords)) {
                                    console.warn('No records found or invalid data source.');
                                    return;
                                }
                                fetch('../database/save_payslips.php', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(newRecords)
                                    })
                                    .then(response => response.json())
                                    .then(result => {
                                        console.log(result);
                                        DevExpress.ui.notify(result.message, result.status === 'success' ? "success" : "error", 2000);
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        DevExpress.ui.notify("Server Error", "error", 2000);
                                    });

                                console.log('%c[Payroll Data Sent]', 'color: #4CAF50; font-weight: bold;');
                                console.log(`Records Posted: ${newRecords.length}`);
                            },
                            hint: 'Update & Send to Server',
                        }
                    });

                    /************************************************
                     * 3) Generate Payslips Button
                     ************************************************/
                    toolbarItems.unshift({
                        location: 'after',
                        widget: 'dxButton',
                        options: {
                            icon: 'refresh',
                            text: 'Generate',
                            elementAttr: {
                                class: 'tax-button-class',
                            },
                            onClick: function() {
                                // Get selected rows from the DataGrid
                                const selectedRowsData = dataGrid.getSelectedRowsData();

                                if (selectedRowsData.length === 0) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'No Selection',
                                        text: 'Please select at least one record to preview',
                                        timer: 1500
                                    });
                                    return;
                                }

                                // Call the previewPayslip function with all selected records
                                previewPayslip(selectedRowsData);
                            },
                            hint: 'Preview selected payslips',
                        }
                    });

                    /************************************************
                     * 9) Existing "Batch" Buttons
                     ************************************************/
                    toolbarItems.unshift({
                        widget: "dxButton",
                        location: "before",
                        options: {
                            icon: "group",
                            text: "Create Payroll",
                            onClick: function() {
                                batchPopup.show();
                            }
                        }
                    });
                },
            
            }).dxDataGrid("instance");

        });


        
        function formatDate(date) {
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        function truncateText(text, maxLength) {
            if (typeof text !== "string") {
                console.error("truncateText received a non-string value:", text);
                return "N/A";
            }
            return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
        }

        function flattenObject(obj, parentKey = '', result = {}) {
            for (let key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const newKey = parentKey ? `${parentKey}.${key}` : key;
                    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
                        flattenObject(obj[key], newKey, result);
                    } else {
                        result[newKey] = obj[key];
                    }
                }
            }
            return result;
        }

        function previewPayslip(records) {

            function formatCurrency(value) {
                return value ? `$${value.toFixed(2)}` : '$0.00';
            }
            // Helper function to format dates
            function formatDate(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString();
            }
            // Generate HTML content for all records
            let previewHTML = ``;
            // Loop through each record and generate its payslip
            records.forEach((record, index) => {

                let adjustcolumns = 0;
                let adjustcolumns2 = 0;

                const employee = employeeList.find(e => e.IDnum === record.IDnum) || {};

                const employeeInfo = getEmployeeInfo(employee);
                function getEmployeeInfo(employee) {
                    if (!employee || !employee.IDnum) {
                        return {
                            department: "N/A",
                            firstname: "N/A",
                            lastname: "N/A",
                            position: "N/A",
                            trn: "N/A",
                            nis: "N/A",
                            line: "",
                            visible: "none"
                        };
                    }

                    return {
                        department: truncateText(employee.Department || "", 17),
                        firstname: truncateText(employee.FirstName || "", 17),
                        lastname: truncateText(employee.LastName || "", 17),
                        position: truncateText(employee.Position || "", 17),
                        trn: truncateText(employee.TRN || "", 17),
                        nis: truncateText(employee.NIS || "", 17),
                        line: '<div style="height: 0px;"></div>',
                        visible: "block"
                    };
                }

                const salaryInfo = getSalaryInfo(record);
                function getSalaryInfo(record) {
                    const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
                    const effectiveHours = getEffectiveHours(record);
                    const fixed = record.FixPayOverride || 0;

                    // Case 1: If both FixPayOverride and hours are missing or zero, hide it
                    if ((effectiveHours === 0) && (fixed === 0)) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            rate: "",
                            fixed: "",
                            line: "",
                            visible: "none"
                        };
                    }

                    // Case 2: FixPayOverride present
                    if (fixed > 0) {
                        const formattedFixPay = `$${fixed.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                        return {
                            title: "Salary",
                            hours: "-",
                            amount: formattedFixPay,
                            rate: "-",
                            fixed: "Fixed",
                            line: "<br>",
                            visible: "block"
                        };
                    }

                    // Case 3: Hours present
                    adjustcolumns++;
                    const calculatedRegular = effectiveHours * effectivePayRate;
                    const formattedRate = `$${effectivePayRate.toFixed(2)}`;
                    return {
                        title: "Salary",
                        hours: `${effectiveHours}`,
                        amount: `$${calculatedRegular.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`,
                        rate: formattedRate,
                        fixed: "",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const sickInfo = getSickInfo(record);
                function getSickInfo(record) {
                    if (!record.sickDays || record.sickDays === 0) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const calculatedSick = calculateSickPay(record);
                    const formattedAmount = `$${calculatedSick.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    return {
                        title: "Sick",
                        hours: `${record.sickDays}`,
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const travelingInfo = getTravelingInfo(record);
                function getTravelingInfo(record) {
                    if (!record.Travel || record.Travel === 0) {
                        return {
                            title: "",
                            amount: "",
                            line: "",
                            blank: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const formattedAmount = `$${record.Travel.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    return {
                        title: "Traveling",
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const incentiveInfo = getIncentiveInfo(record);
                function getIncentiveInfo(record) {
                    if (!record.Incentive || record.Incentive === 0) {
                        return {
                            title: "",
                            amount: "",
                            line: "",
                            blank: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const formattedAmount = `$${record.Incentive.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    return {
                        title: "Incentive",
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const allowanceInfo = getAllowanceInfo(record);
                function getAllowanceInfo(record) {
                    if (!record.Allowance || record.Allowance === 0) {
                        return {
                            title: "",
                            amount: "",
                            line: "",
                            blank: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const formattedAmount = `$${record.Allowance.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    return {
                        title: "Allowance",
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const otInfo = getOTInfo(record);
                function getOTInfo(record) {
                    if (!record.OT_Hours || record.OT_Hours === 0) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            rate: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const calculatedOverTime = calculateOvertimePay(record);
                    const formattedAmount = `$${calculatedOverTime.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const overtimeRate = record.OT_Rate;
                    return {
                        title: "Overtime",
                        hours: `${record.OT_Hours}`,
                        amount: formattedAmount,
                        rate: `${overtimeRate}x`,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const holidayInfo = getHolidayInfo(record);
                function getHolidayInfo(record) {
                    if (!record.H_Hours || record.H_Hours === 0) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            rate: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const calculatedHoliday = calculateHolidayPay(record);
                    const formattedAmount = `$${calculatedHoliday.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const holidayRate = record.H_Rate;
                    return {
                        title: "Holiday",
                        hours: `${record.H_Hours}`,
                        amount: formattedAmount,
                        rate: `${holidayRate}x`,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const doubleInfo = getDoubleInfo(record);
                function getDoubleInfo(record) {
                    if (!record.DT_Hours || record.DT_Hours === 0) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            rate: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const calculatedDt = calculateDoubleTimePay(record);
                    const formattedAmount = `$${calculatedDt.toFixed(2)}`;
                    const doubleTimeRate = record.DT_Rate;
                    return {
                        title: "Double Time",
                        hours: `${record.DT_Hours}`,
                        amount: formattedAmount,
                        rate: `${doubleTimeRate}x`,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const OtherInfo = getOtherInfo(record);
                function getOtherInfo(record) {
                    if (
                        (!record.Other || record.Other === 0) &&
                        (!record.Other2 || record.Other2 === 0) &&
                        (!record.Other3 || record.Other3 === 0)
                    ) {
                        return {
                            title: "",
                            hours: "",
                            days: "",
                            fixedValue: "",
                            totalHours: "",
                            amount: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }

                    adjustcolumns++;
                    let otherHours = 0;
                    let otherDays = 0;
                    let otherFixedValue = 0;

                    // Calculate Other Hours
                    if (record.Other && record.Other > 0) {
                        otherHours = record.Other;
                    }

                    // Calculate Other Days (convert days to hours)
                    if (record.Other2 && record.Other2 > 0) {
                        otherDays = record.Other2 * 8; // 8 hours per day
                    }

                    // Calculate Other Fixed Value
                    if (record.Other3 && record.Other3 > 0) {
                        otherFixedValue = record.Other3;
                    }

                    // Calculate Total Other Hours
                    const totalOtherHours = otherHours + otherDays;

                    // Calculate Other Pay
                    const calculatedOther = calculateOtherPay(record);
                    const formattedAmount = `$${calculatedOther.toFixed(2)}`;

                    // Format the output
                    return {
                        title: truncateText(record.Description || "", 15),
                        hours: `${otherHours} hours`,
                        days: `${record.Other2 || 0} days (${otherDays} hours)`,
                        fixedValue: `$${otherFixedValue.toFixed(2)}`,
                        totalHours: `${totalOtherHours}`,
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const VacationInfo = getVacationInfo(record);
                function getVacationInfo(record) {
                    if (!record.Vac || record.Vac === 0) {
                        return {
                            title: "",
                            hours: "",
                            amount: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }
                    adjustcolumns++;
                    const vacationHours = record.Vac * 8;
                    const calculatedVacation = calculateVacationPay(record);
                    const formattedAmount = `$${calculatedVacation.toFixed(2)}`;

                    return {
                        title: "Vacation",
                        hours: `${vacationHours}`,
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const PersonalInfo = getPersonalInfo(record);
                function getPersonalInfo(record) {
                    if (
                        (!record.PersonalHours || record.PersonalHours === 0) &&
                        (!record.PersonalDays || record.PersonalDays === 0)
                    ) {
                        return {
                            title: "",
                            hours: "",
                            days: "",
                            fixedValue: "",
                            totalHours: "",
                            amount: "",
                            blank: "",
                            line: "",
                            visible: "none"
                        };
                    }

                    adjustcolumns++;
                    let setPersonalHours = 0;
                    let setPersonalDays = 0;
                    let otherFixedValue = 0;

                    // Calculate Personal Hours
                    if (record.PersonalHours && record.PersonalHours > 0) {
                        setPersonalHours = record.PersonalHours;
                    }

                    // Calculate Personal Days (convert days to hours)
                    if (record.PersonalDays && record.PersonalDays > 0) {
                        setPersonalDays = record.PersonalDays * 8; // 8 hours per day
                    }

                    // Calculate Other Fixed Value
                    if (record.Other3 && record.Other3 > 0) {
                        otherFixedValue = record.Other3;
                    }

                    // Calculate Total Personal Hours
                    const totalPersonalHours = setPersonalHours + setPersonalDays;

                    // Calculate Personal Pay
                    const effectivePayRate = record.PayRateOverride || record.PayRate || 0;
                    const calculatedPersonalPay = (setPersonalHours + setPersonalDays) * effectivePayRate;
                    const formattedAmount = `$${calculatedPersonalPay.toFixed(2)}`;

                    // Format the output
                    return {
                        title: "Personal",
                        hours: `${setPersonalHours} hours`,
                        days: `${record.PersonalDays || 0} days (${setPersonalDays} hours)`,
                        fixedValue: `$${otherFixedValue.toFixed(2)}`,
                        totalHours: `${totalPersonalHours}`,
                        amount: formattedAmount,
                        blank: "-",
                        line: "<br>",
                        visible: "block"
                    };
                }

                const deduction1Info = getDeductable1Info(record);
                function getDeductable1Info(record) {
                    const deduction = Number(record.variable_deduction1) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description1 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction2Info = getDeductable2Info(record);
                function getDeductable2Info(record) {
                    const deduction = Number(record.variable_deduction2) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description2 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction3Info = getDeductable3Info(record);
                function getDeductable3Info(record) {
                    const deduction = Number(record.variable_deduction3) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description3 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction4Info = getDeductable4Info(record);
                function getDeductable4Info(record) {
                    const deduction = Number(record.variable_deduction4) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description4 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction5Info = getDeductable5Info(record);
                function getDeductable5Info(record) {
                    const deduction = Number(record.variable_deduction5) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description5 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction6Info = getDeductable6Info(record);
                function getDeductable6Info(record) {
                    const deduction = Number(record.variable_deduction6) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description6 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction7Info = getDeductable7Info(record);
                function getDeductable7Info(record) {
                    const deduction = Number(record.variable_deduction7) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description7 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }

                const deduction8Info = getDeductable8Info(record);
                function getDeductable8Info(record) {
                    const deduction = Number(record.variable_deduction8) || 0;
                    if (deduction <= 0) {
                        return {
                            d: "",
                            d_deduction: "",
                            line: ""
                        };
                    }
                    adjustcolumns2++;
                    const amount = deduction.toLocaleString('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                    return {
                        d: truncateText(record.variable_description8 || "Deduction", 13),
                        d_deduction: amount,
                        line: "<br>"
                    };
                }


    const pensionInfo = getPensionInfo(record, employee);
function getPensionInfo(record, employee) {
    // Use the stored calculatedPension value from the record
    const pension = record.calculatedPension || 0;
    
    if (pension <= 0) {
        return {
            title: "",
            amount: "",
            line: ""
        };
    }
    
    const amount = pension.toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
    
    return {
        title: "Pension",
        amount: amount,
        line: "<br>"
    };
}


               const columnInfo = getColumnInfo(adjustcolumns, adjustcolumns2, [
                    deduction1Info, deduction2Info, deduction3Info, deduction4Info, deduction5Info, deduction6Info, deduction7Info, deduction8Info
                ]);
                function getColumnInfo(adjustcolumns, adjustcolumns2, deductions) {
                    const activeDeductions = deductions.filter(d => Number(d.d_deduction.replace(/[^0-9.-]+/g, "")) > 0).length;
                    return {
                        row1: (adjustcolumns >= 7 || adjustcolumns2 >= 3 || activeDeductions >= 3) ? "block" : "none",
                        row2: (adjustcolumns >= 8 || adjustcolumns2 >= 4 || activeDeductions === 4) ? "block" : "none",
                        row3: adjustcolumns >= 9 ? "block" : "none",
                        row4: adjustcolumns >= 10 ? "block" : "none",
                        row5: adjustcolumns >= 11 ? "block" : "none"
                    };
                }

const grossInfo = getGrossInfo(record, employee);
function getGrossInfo(record, employee) {
    // 1. Calculate all earnings components (SAME METHOD AS IN CALCULATIONS)
    const regularPay = calculateRegularPay(record) || 0;
    const sickPay = calculateSickPay(record) || 0;
    const overtimePay = calculateOvertimePay(record) || 0;
    const holidayPay = calculateHolidayPay(record) || 0;
    const vacationPay = calculateVacationPay(record) || 0;
    const doubleTimePay = calculateDoubleTimePay(record) || 0;
    const personalPay = calculatePersonalPay(record) || 0;
    const otherPay = calculateOtherPay(record) || 0;

    // 2. Calculate total gross from components
    const totalGross = regularPay + sickPay + overtimePay + holidayPay + vacationPay + 
                     doubleTimePay + personalPay + otherPay + 
                     (record.Travel || 0) + (record.Incentive || 0) + (record.Allowance || 0);

    // 3. Format currency values
    const formatCurrency = (value) =>
        `$${value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;

    // 4. Handle missing/invalid data
    if (!record || totalGross === 0) {
        return {
            gross: "N/A",
            gross_val: "N/A",
            tax: "N/A",
            tax_val: "N/A",
            net: "N/A",
            net_val: "N/A",
            deduct_Val: "N/A",
            line: "",
            visible: "none"
        };
    }

    // 5. Calculate variable deductions
    const variableDeductions =
        (record.variable_deduction1 || 0) +
        (record.variable_deduction2 || 0) +
        (record.variable_deduction3 || 0) +
        (record.variable_deduction4 || 0) +
        (record.variable_deduction5 || 0) +
        (record.variable_deduction6 || 0) +
        (record.variable_deduction7 || 0) +
        (record.variable_deduction8 || 0);

    // 6. Calculate pension using the SAME gross pay that's displayed
    const pensionAmount = record.calculatedPension || calculatePension(employee.IDnum, totalGross);

    // 7. Calculate total deductions (variable deductions + pension)
    const totalDeductions = variableDeductions + pensionAmount;

    // 8. Calculate net pay (Gross - Taxes - All Deductions including Pension)
    const setNetPay = totalGross - (record.calculatedTaxs + totalDeductions);

    return {
        gross: "GrossPay",
        gross_val: formatCurrency(totalGross),
        tax: "Taxs",
        tax_val: formatCurrency(record.calculatedTaxs || 0),
        net: "NetPay",
        net_val: formatCurrency(setNetPay || 0),
        deduct_Val: formatCurrency(totalDeductions),
        line: "<br>",
        visible: "block"
    };
}




                const taxInfo = getTaxInfo(record);
                function getTaxInfo(record) {
                    if (!record || !record.IDnum) {
                        return {
                            nis: "N/A",
                            nht: "N/A",
                            edtax: "N/A",
                            paye: "N/A",
                            nis_val: "N/A",
                            nht_val: "N/A",
                            edtax_val: "N/A",
                            paye_val: "N/A",
                            nis_val2: "N/A",
                            nht_val2: "N/A",
                            edtax_val2: "N/A",
                            paye_val2: "N/A",
                            visible: "none"
                        };
                    }
                    // Format current period amounts
                    const nisamount = `$${record.calculatedNIS.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const nhtamount = `$${record.calculatedNHT.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const edtaxamount = `$${record.calculatedEdTax.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const payeamount = `$${record.calculatedPAYE.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;

                    // Use the accumulated YTD values from the record instead of multiplying by ytdTracker
                    const nisamount2 = `$${record.ytdNIS.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const nhtamount2 = `$${record.ytdNHT.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const edtaxamount2 = `$${record.ytdEDTAX.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;
                    const payeamount2 = `$${record.ytdPAYE.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')}`;

                    // Add pension calculation
                    const pensionAmount = calculatePension(record.IDnum, record.calculatedGrossPay - (record.Travel || 0));
                    const pensionAmountFormatted = `$${pensionAmount.toFixed(2)}`;

                    return {
                        nis: "NIS",
                        nht: "NHT",
                        edtax: "EdTax",
                        paye: "PAYE",
                        nis_val: nisamount,
                        nht_val: nhtamount,
                        edtax_val: edtaxamount,
                        paye_val: payeamount,
                        nis_val2: nisamount2,
                        nht_val2: nhtamount2,
                        edtax_val2: edtaxamount2,
                        paye_val2: payeamount2,
                        pension: "Pension",
                        pension_val: pensionAmountFormatted,
                        line: "<br>",
                        visible: "block"
                    };
                }

                const frequency = validateFrequency(record.override || record.Frequency);
                const periodMax = getPeriodMax(frequency);

                console.log(adjustcolumns);
                console.log(adjustcolumns2);

                previewHTML += `

    <div class="payslipContent" style="width: 1080px; padding: 0px 0; display: flex; flex-direction: column; position: relative; text-align: left;">

            <div class="header" style="margin: 0px 0px 0px 0px; padding: 9px; border-radius: 50px; border: 2px solid black;">
                <div style="margin: 0px 0px 0px 0px; padding: 0px; border-radius: 0; border: none;">
                    <table border="0" style="width: 100%; border-collapse: collapse; font-size: 14px; margin: 0px 5px 0px 5px;">
                        <tr style="line-height: 2; width: 100%; border-collapse: collapse; font-size: 18px;">
                            <td colspan="1" style="text-align: center; padding: 0px; font-weight: 800; font-size: 18px;">
                                ${Company_data[0].Company}  
                            </td>
                        </tr>
                        <tr style="width: 100%; border-collapse: collapse; font-size: 15px;">
                            <td style="text-align: center; font-size: 13px; font-weight: 800;">
                                ${record.override || record.Frequency} Pay Period: ${formatDate(record.rundate)} (${record.payPeriod || 0} of ${periodMax || 0})
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

            <br>

            <!-- Additional Table -->
            <div style="margin-top: 0px;">
                <div style="border:2px solid black;">
                    <table border="0" style="width: 100%; border-collapse: collapse; font-size: 14px;">

                        <tr class="stripgrey;" style="text-align:right;font-weight: 800; padding:0px; font-size:13px; border-bottom:2px solid black; background-color:lightgrey !important;">
                            <td style="width: 100px; text-align:left; padding-left:5px; line-height:25px;">EMPLOYEE #</td>
                            <td style="width: 115px; text-align:left; margin: 0px 0px 0px 50px;"> ${record.IDnum || 'N/A'}</td>
                            <td style="width: 100px; text-align:left; padding: 0px 0px 0px 15px;">EARNINGS</td>
                            <td style="width: 50px; text-align:left; padding: 0px 0px 0px 15px;">HOURS</td>
                            <td style="width: 20px; text-align: right; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;">RATE</td>
                            <td style="width: 80px; text-align:left; padding: 0px 0px 0px 35px;">AMOUNT</td>
                            <td style="width: 80px;text-align:left; padding: 0px 0px 0px 12px;">TAXES</td>
                            <td style="width: 100px;text-align:right;">AMOUNT</td>
                            <td style="width: 80px; text-align:right; padding: 0px 15px 0px 0px;">YTD</td>
                            <td style="width: 110px; text-align: center; position:absolute; margin: 7px 0px 0px -5px; padding: 0px 0px 0px 0px;">AMOUNT</td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; padding-top:5px; line-height:25px;">DEPARTMENT</td>
                            
                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:2px; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${employeeInfo.department}${employeeInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${employeeInfo.firstname}${employeeInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${employeeInfo.lastname}${employeeInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${employeeInfo.position}${employeeInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${employeeInfo.trn}${employeeInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${employeeInfo.nis}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:12.5%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${salaryInfo.title}${salaryInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${sickInfo.title}${sickInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${travelingInfo.title}${travelingInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${incentiveInfo.title}${incentiveInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${allowanceInfo.title}${allowanceInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${otInfo.title}${otInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${holidayInfo.title}${holidayInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${doubleInfo.title}${doubleInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${OtherInfo.title}${OtherInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${VacationInfo.title}${VacationInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${PersonalInfo.title}${PersonalInfo.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:24%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${salaryInfo.hours}${salaryInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${sickInfo.hours}${sickInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${travelingInfo.blank}${travelingInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${incentiveInfo.blank}${incentiveInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${allowanceInfo.blank}${allowanceInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${otInfo.hours}${otInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${holidayInfo.hours}${holidayInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${doubleInfo.hours}${doubleInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${OtherInfo.totalHours}${OtherInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${VacationInfo.hours}${VacationInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${PersonalInfo.totalHours}${PersonalInfo.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:34%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${salaryInfo.rate}${salaryInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${sickInfo.blank}${sickInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${travelingInfo.blank}${travelingInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${incentiveInfo.blank}${incentiveInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${allowanceInfo.blank}${allowanceInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${otInfo.blank}${otInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${holidayInfo.blank}${holidayInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${doubleInfo.blank}${doubleInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${OtherInfo.blank}${OtherInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${VacationInfo.blank}${VacationInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${PersonalInfo.blank}${PersonalInfo.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:41%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${salaryInfo.amount}${salaryInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${sickInfo.amount}${sickInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${travelingInfo.amount}${travelingInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${incentiveInfo.amount}${incentiveInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${allowanceInfo.amount}${allowanceInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${otInfo.amount}${otInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${holidayInfo.amount}${holidayInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${doubleInfo.amount}${doubleInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${OtherInfo.amount}${OtherInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${VacationInfo.amount}${VacationInfo.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${PersonalInfo.amount}${PersonalInfo.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:51.4%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${taxInfo.nis}${taxInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${taxInfo.nht}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.edtax}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.paye}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${pensionInfo.title}${pensionInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${deduction1Info.d}${deduction1Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction2Info.d}${deduction2Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction3Info.d}${deduction3Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction4Info.d}${deduction4Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction5Info.d}${deduction5Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction6Info.d}${deduction6Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction7Info.d}${deduction7Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction8Info.d}${deduction8Info.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:62.5%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${taxInfo.nis_val}${taxInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${taxInfo.nht_val}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.edtax_val}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.paye_val}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${pensionInfo.amount}${pensionInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${deduction1Info.d_deduction}${deduction1Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction2Info.d_deduction}${deduction2Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction3Info.d_deduction}${deduction3Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction4Info.d_deduction}${deduction4Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction5Info.d_deduction}${deduction5Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction6Info.d_deduction}${deduction6Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction7Info.d_deduction}${deduction7Info.line}</div>
                                <div style="margin: 12px 0px 0px 0px;">${deduction8Info.d_deduction}${deduction8Info.line}</div>
                                </td>

                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:73.5%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${taxInfo.nis}${taxInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${taxInfo.nht}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.edtax}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.paye}${taxInfo.line}</div>
                                </td>
                       
                            <td style="text-align: left; font-size:12px; position:absolute; margin-left:80%; margin-top:5px; display:block;">
                                <div style="margin: 5px 0px 0px 0px;">${taxInfo.nis_val2}${taxInfo.line}</div>
                                <div style="margin: 14px 0px 0px 0px;">${taxInfo.nht_val2}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.edtax_val2}${taxInfo.line}</div>
                                <div style="margin: 13px 0px 0px 0px;">${taxInfo.paye_val2}${taxInfo.line}</div>
                                </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">FIRST NAME</td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:12px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: right; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">LAST NAME</td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:12px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: right; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 450px;"> </td>
                        </tr>


                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">JOB TITLE</td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:12px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: right; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 450px;"> </td>
                        </tr>


                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">TRN #</td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:12px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: right; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">NIS #</td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:12px; position:absolute; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: right; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; visibility: show; font-size:13px; position:absolute; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: right; visibility: show; font-size: 13px; position:absolute; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: ${columnInfo.row1}; ">
                            <td style="width: 90px; text-align:left; line-height:25px; ">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: ${columnInfo.row2};">
                            <td style="width: 90px; text-align:left;line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: ${columnInfo.row3};">
                            <td style="width: 90px; text-align:left;line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        
                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: ${columnInfo.row4};">
                            <td style="width: 90px; text-align:left;line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>

                        <tr style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: ${columnInfo.row5};">
                            <td style="width: 90px; text-align:left;line-height:25px; padding-left:">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>                        
              

                        ${deduction4Info.d ? `
                        <tr class="strip4" style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: block;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        ` : ''}

                        ${deduction5Info.d ? `
                        <tr class="strip5" style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: block;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        ` : ''}

                        ${deduction6Info.d ? `
                        <tr class="strip6" style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: block;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        ` : ''}

                        ${deduction7Info.d ? `
                        <tr class="strip7" style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: block;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        ` : ''}

                        ${deduction8Info.d ? `
                        <tr class="strip8" style="text-align:right;font-weight: 500; padding:0px; font-size:13px; border-bottom:1px solid #fff; background-color:white; display: block;">
                            <td style="width: 90px; text-align:left; padding-left:5px; line-height:25px;">-</td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:12px; margin: 0px 0px 0px 0px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 110px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -45px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px -14px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 95px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 170px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 295px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 350px;"> </td>
                            <td style="text-align: left; font-size:13px; margin: 0px 0px 0px 450px;"> </td>
                        </tr>
                        ` : ''}


                        <tr style="text-align:right;font-weight: 800; padding:0px; font-size:13px; border-top:2px solid black; border-bottom:2px solid black; background-color:lightgrey !important;">
                            <td style="width: 100px; text-align:left; padding-left:5px; line-height:19px;">Payroll ID#: </td>
                            <td style="width: 120px; text-align:left; position:absolute; margin: 2px 0px 0px -20px;"> ${record.payslipID || 'N/A'}</td>
                            <td style="width: 100px; text-align:left;"></td>
                            <td style="width: 50px; text-align:left;"></td>
                            <td style="width: 68px; text-align:right; padding: 0px 0px 0px 20px;">GrossPay:</td>
                            <td style="width: 80px; text-align:left; padding: 0px 0px 0px 5px;">${grossInfo.gross_val}</td>
                            <td style="width: 90px;text-align:right; margin: 3px 0px 0px -30px;">Deductions: </td>
                            <td style="width: 100px;text-align:left; margin: 0px 0px 0px 55px;">${grossInfo.deduct_Val}</td>
                            <td style="width: 80px; text-align:right;">Taxs: </td>
                            <td style="width: 110px; text-align: left; margin: 3px 0px 0px 10px; padding: 0px 5px 0px 5px;">${grossInfo.tax_val}</td>
                        </tr>

                        <tr style="padding:20px 0px; color:#fff; font-weight: 800; font-size:13px; border-top:2px solid black; background-color:rgb(60, 151, 51) !important;line-height:25px;">
                            <td style="width: 100px; color:#fff; font-weight: 500; font-size:10px; text-align:right; padding:0px; "></td>
                            <td style="width: 210px; text-align:left; font-style: italic; color: #fff; font-weight: 600; font-size:10px; position:absolute; margin: -1px 0px 0px -90px;">Location: ${Company_data[0].Address} </td>
                            <td style="width: 100px; text-align:left;"> </td>
                            <td style="width: 50px; text-align:left;"> </td>
                            <td style="width: 68px; text-align: right;"> </td>
                            <td style="width: 100px; text-align:left; padding: 0px 0px 0px 30px;"> </td>
                            <td style="width: 50px;text-align:right; padding:0px;"> </td>
                            <td style="width: 100px;text-align:left;"> </td>
                            <td style="width: 80px; text-align:right; padding:0px;">Net Salary: </td>
                            <td style="width: 110px; text-align: left; padding: 0px 0px 0px 5px;"> ${grossInfo.net_val}</td>
                        </tr>
            </table>
            </div>
            </div>          
            
        </div>
    </div><br>
            ${index < records.length - 1 ? '<div class="record-separator"></div>' : ''}
            
        `;
            });

            previewHTML += '</div>';
            adjustcolumns = 0;
            adjustcolumns2 = 0;

            // Display the preview in a modal
            Swal.fire({
                html: previewHTML,
                width: 'auto',
                showCloseButton: false,
                showConfirmButton: false,
                customClass: {
                    container: 'preview-modal',
                    popup: 'preview-popup',
                    header: 'preview-header',
                    content: 'preview-content'
                },
                footer: `
                <div class="preview-footer">
                    <button id="downloadPdf" class="btn btn-download" style="background-color:darkred; color: white; padding:8px; border-radius:5px;">
                        <i class="fas fa-file-pdf"></i> Download
                    </button>
                    <button id="sendEmail" class="btn btn-email" style="background-color:rgb(19, 77, 223); color: white; padding:8px; border-radius:5px;">
                        <i class="fas fa-envelope"></i> Email
                    </button>
                </div>
            `,
                didOpen: () => {
                    setTimeout(() => {
                        // PDF Download Handler
                        document.getElementById('downloadPdf').addEventListener('click', async () => {
    // Create progress UI
    const progressContainer = document.createElement('div');
    progressContainer.style = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        z-index: 10000;
    `;
    const progressText = document.createElement('div');
    progressText.textContent = 'Preparing PDF batches...';
    const progressBarContainer = document.createElement('div');
    progressBarContainer.style = `
        width: 300px;
        height: 10px;
        background: #eee;
        margin-top: 10px;
        border-radius: 5px;
    `;
    const progressBar = document.createElement('div');
    progressBar.style = `
        height: 100%;
        width: 0%;
        background: #4CAF50;
        border-radius: 5px;
        transition: width 0.3s;
    `;
    progressBarContainer.appendChild(progressBar);
    progressContainer.appendChild(progressText);
    progressContainer.appendChild(progressBarContainer);
    document.body.appendChild(progressContainer);
    
    try {
        const tempContainer = document.createElement('div');
        tempContainer.innerHTML = previewHTML;
        const payslips = Array.from(tempContainer.querySelectorAll('.payslipContent'));
        
        // Batch processing settings
        const maxPagesPerPdf = 10;
        const maxPayslipsPerPdf = 30; // Approximate limit per batch
        const totalGroups = Math.ceil(payslips.length / maxPayslipsPerPdf);
        
        // Disable button during processing
        const downloadButton = document.getElementById('downloadPdf');
        downloadButton.disabled = true;
        
        for (let groupIndex = 0; groupIndex < totalGroups; groupIndex++) {
            const startIndex = groupIndex * maxPayslipsPerPdf;
            const endIndex = Math.min(startIndex + maxPayslipsPerPdf, payslips.length);
            const groupPayslips = payslips.slice(startIndex, endIndex);
            
            // Update progress
            progressText.textContent = `Processing group ${groupIndex + 1}/${totalGroups}...`;
            progressBar.style.width = `${((groupIndex + 1) / totalGroups) * 100}%`;
            
            // Create container for this batch
            const pdfContainer = document.createElement('div');
            pdfContainer.style.width = '1080px';
            pdfContainer.style.margin = '0 auto';
            
            // Page dimensions in mm (A3: 297 x 420 mm)
            const pageHeightMm = 420;
            const pageWidthMm = 297;
            const marginMm = 10; // Top and bottom margin
            const usablePageHeightMm = pageHeightMm - (2 * marginMm) - 5; // Extra 5mm buffer
            
            // Conversion factor: 1mm = 3.78px at 96dpi (with scale=2 in html2canvas)
            const pxToMm = 25.4 / (96 * 2); // mm per pixel
            
            // Track current page height
            let currentPageHeightMm = 0;
            
            // Add all payslips to container with manual page break calculation
            groupPayslips.forEach((payslip, index) => {
                const clone = payslip.cloneNode(true);
                clone.style.margin = '15px auto 20px';
                clone.style.width = '100%';
                clone.style.pageBreakInside = 'avoid';
                clone.style.breakInside = 'avoid';
                clone.style.display = 'block';
                
                // Apply break-avoidance to all child elements
                const allChildren = clone.querySelectorAll('*');
                allChildren.forEach(child => {
                    child.style.pageBreakInside = 'avoid';
                    child.style.breakInside = 'avoid';
                });
                
                // Create a temporary container to measure the payslip height
                const tempMeasureContainer = document.createElement('div');
                tempMeasureContainer.style.width = '1080px';
                tempMeasureContainer.style.position = 'absolute';
                tempMeasureContainer.style.visibility = 'hidden';
                tempMeasureContainer.style.top = '-10000px';
                tempMeasureContainer.appendChild(clone);
                document.body.appendChild(tempMeasureContainer);
                
                // Measure the payslip height including margins
                const payslipHeightPx = clone.offsetHeight;
                const computedStyle = window.getComputedStyle(clone);
                const marginTopPx = parseFloat(computedStyle.marginTop);
                const marginBottomPx = parseFloat(computedStyle.marginBottom);
                const totalHeightPx = payslipHeightPx + marginTopPx + marginBottomPx;
                
                // Convert to mm
                const payslipHeightMm = totalHeightPx * pxToMm;
                
                // Remove temporary container
                document.body.removeChild(tempMeasureContainer);
                
                // Add a 25px space after each payslip (convert to mm)
                const spaceAfterMm = 25 * pxToMm;
                const totalElementHeightMm = payslipHeightMm + spaceAfterMm;
                
                // Check if we need a page break
                if (currentPageHeightMm + totalElementHeightMm > usablePageHeightMm) {
                    // Add page break before this payslip
                    const pageBreak = document.createElement('div');
                    pageBreak.style.pageBreakBefore = 'always';
                    pageBreak.style.height = '0';
                    pdfContainer.appendChild(pageBreak);
                    
                    // Reset current page height
                    currentPageHeightMm = 0;
                }
                
                // Add the payslip to the PDF container
                pdfContainer.appendChild(clone);
                
                // Add px space after the payslip
                const spaceDiv = document.createElement('div');
                spaceDiv.style.height = '0px';
                spaceDiv.style.width = '100%';
                pdfContainer.appendChild(spaceDiv);
                
                // Update current page height
                currentPageHeightMm += totalElementHeightMm;
            });
            
            // Small delay to allow UI to update
            await new Promise(resolve => setTimeout(resolve, 100));
            
            progressText.textContent = `Generating PDF part ${groupIndex + 1}...`;
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // Generate PDF with automatic page breaking
            await html2pdf().set({
                margin: [10, 5],
                filename: `payslips_${new Date().toISOString().split('T')[0]}_part${groupIndex + 1}.pdf`,
                image: {
                    type: 'jpeg',
                    quality: 0.98
                },
                html2canvas: {
                    scale: 2,
                    logging: false,
                    useCORS: true
                },
                jsPDF: {
                    unit: 'mm',
                    format: 'a3',
                    orientation: 'portrait',
                    putOnlyUsedFonts: true
                },
                pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
            }).from(pdfContainer).save();
        }
        
        progressText.textContent = 'All downloads complete!';
        progressBar.style.width = '100%';
    } catch (error) {
        console.error('PDF generation failed:', error);
        progressText.innerHTML = `Error: ${error.message}<br>Try smaller batches`;
        progressBar.style.background = '#f44336';
    } finally {
        setTimeout(() => {
            if (progressContainer.parentNode) {
                document.body.removeChild(progressContainer);
            }
            const downloadButton = document.getElementById('downloadPdf');
            downloadButton.disabled = false;
        }, 2000);
    }
});


                 
// Email Handler
document.getElementById('sendEmail').addEventListener('click', async () => {
    const loadingIndicator = document.getElementById('loading-indicator');
    loadingIndicator.style.display = 'flex';
    
    const payslips = document.querySelectorAll('.payslipContent');
    const logResults = [];
    const totalEmails = payslips.length;

    try {
        for (const [index, payslip] of payslips.entries()) {
            // Update progress
            loadingIndicator.querySelector('div').innerHTML = `
                <i class="fas fa-spinner fa-spin"></i> Processing ${index + 1}/${totalEmails} emails...
            `;
            
            const idMatch = payslip.innerText.match(/EMPLOYEE #\s*(\d+)/i);
            const idNum = idMatch ? parseInt(idMatch[1]) : null;

            if (!idNum) {
                logResults.push({
                    idNum: 'N/A',
                    email: 'Unknown',
                    status: 'error',
                    message: 'ID not found'
                });
                continue;
            }

            const employee = employeeList.find(e => parseInt(e.IDnum) === idNum);
            if (!employee) {
                logResults.push({
                    idNum,
                    email: 'Missing',
                    status: 'error',
                    message: 'Employee record not found'
                });
                continue;
            }
            
            if (!employee.Email1) {
                logResults.push({
                    idNum,
                    email: 'Missing',
                    status: 'error',
                    message: 'Email not found in employee record'
                });
                continue;
            }

            const email = employee.Email1;
            const name = `${employee.FirstName} ${employee.LastName}`;
            const filename = `${name.replace(/\s+/g, '_')}_Payslip.pdf`;

            // Wrap in a shrinkable container for printing
            const wrapper = document.createElement('div');
            wrapper.style.width = '970px';
            wrapper.style.margin = '0 auto';
            wrapper.style.transform = 'scale(0.9)';
            wrapper.style.transformOrigin = 'top left';
            wrapper.style.padding = '2px';
            wrapper.appendChild(payslip.cloneNode(true));

            try {
                // Generate PDF and convert to base64
                const pdfBlob = await html2pdf().set({
                    margin: [2, 2],
                    filename,
                    image: {
                        type: 'jpeg',
                        quality: 1
                    },
                    html2canvas: {
                        scale: 2
                    },
                    jsPDF: {
                        unit: 'mm',
                        format: [266, 279],
                        orientation: 'portrait'
                    }
                }).from(wrapper).outputPdf('blob');

                const base64 = await new Promise(resolve => {
                    const reader = new FileReader();
                    reader.onloadend = () => resolve(reader.result.split(',')[1]);
                    reader.readAsDataURL(pdfBlob);
                });

                // Prepare email content
                const emailSubject = `Your Payslip - ${new Date().toLocaleDateString()}`;
                const emailBody = `
                    <p>Dear ${employee.FirstName} ${employee.LastName},</p>
                    <p>Please find your payslip attached.</p>
                    <p>If you have any questions, please contact the HR department.</p>
                    <p>Best regards,<br>${Company_data[0]?.Company || 'Company'} Payroll Department</p>
                `;

                const response = await fetch('send_email.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        to: email,
                        subject: emailSubject,
                        body: emailBody,
                        pdfData: base64
                    })
                });

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        logResults.push({
                            idNum,
                            name,
                            email,
                            status: 'success',
                            message: 'Email sent successfully'
                        });
                        
                        // Show success notification
                        DevExpress.ui.notify(`Email sent to ${name}`, 'success', 2000);
                    } else {
                        throw new Error(result.message || 'Unknown error occurred');
                    }
                } else {
                    // Handle non-JSON response (likely an error in PHP)
                    const text = await response.text();
                    throw new Error(`Server returned invalid response: ${text.substring(0, 100)}`);
                }
            } catch (err) {
                logResults.push({
                    idNum,
                    name: employee ? `${employee.FirstName} ${employee.LastName}` : 'Unknown',
                    email,
                    status: 'error',
                    message: err.toString()
                });
                
                // Show error notification
                DevExpress.ui.notify(`Failed to send email to ${name}`, 'error', 5000);
            }

            // Wait 1s between sends
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    } catch (error) {
        console.error('Email sending process failed:', error);
        DevExpress.ui.notify('Email sending process failed', 'error', 5000);
    } finally {
        loadingIndicator.style.display = 'none';
        
        // Show results report
        const successCount = logResults.filter(r => r.status === 'success').length;
        const errorCount = logResults.filter(r => r.status === 'error').length;
        
        const logHtml = `
        <div style="max-height: 400px; overflow-y: auto;">
            <h3>Email Send Report</h3>
            <p>Successfully sent: <span style="color:green">${successCount}</span> | Failed: <span style="color:red">${errorCount}</span></p>
            <table border="1" cellpadding="6" style="width:100%; font-size:14px; border-collapse: collapse;">
                <tr style="background:#eee;">
                    <th>ID#</th>
                    <th>Employee</th>
                    <th>Email</th>
                    <th>Status</th>
                    <th>Details</th>
                </tr>
                ${logResults.map(e => `
                    <tr>
                        <td>${e.idNum}</td>
                        <td>${e.name || 'N/A'}</td>
                        <td>${e.email || 'N/A'}</td>
                        <td style="color:${e.status === 'success' ? 'green' : 'red'}; font-weight: bold;">
                            ${e.status.toUpperCase()}
                        </td>
                        <td>${e.message}</td>
                    </tr>
                `).join('')}
            </table>
        </div>`;

        Swal.fire({
            title: 'Email Send Report',
            html: logHtml,
            width: '80%',
            confirmButtonText: 'Close'
        });
    }
});









                    }, 100);
                }
            });
            /*-----*/
        }


